course,sub_course,module,sub_module,content_html_list,img_list,video_url
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.1  Welcome to Udacity,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Welcome to Udacity!</h3>\n<p class=""chakra-text css-o3oz8b"">I am Sebastian, the founder of Udacity.</p>\n<p class=""chakra-text css-o3oz8b"">Our mission is to power careers through tech education. We’re honored that you’ve chosen us to help in your career journey. Whether embarking on a new path. Curious about a new field. Or advancing in your own field. I want you to know, you’re in the right place. We are here to help you accomplish your goals.</p>\n<p class=""chakra-text css-o3oz8b"">I can’t wait to see where this journey takes you!</p></div>']",[],https://www.youtube.com/embed/9QadFJRKrEA
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.2  The Udacity Experience,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If this is your first Nanodegree program, welcome.\nIf you have taken a Nanodegree program with us before, you already know a little bit of what to expect. Udacity is always improving our learning experience for students. So you can watch this to see what is changed or skip ahead. You can also read this in the FAQ located in the resources tab.</p>\n<p class=""chakra-text css-o3oz8b"">Let’s get started.</p>\n<p class=""chakra-text css-o3oz8b"">We truly believe you couldn’t have chosen a better place to learn. A lot of people have worked tirelessly to create the course material and platform features, as we all want you to get the most of your learning journey. Our pledge is to provide you with resources and services that will further enable you to succeed in your Nanodegree program. As you go through the lessons, you may find some to be difficult and may feel discouraged. If this happens, we encourage you to take advantage of your community channels and mentor services to help clarify the concepts, or just to share your doubts. Our mentors are there to help you! You will get advice and guidance to ensure you are on track to complete the projects. We WANT you to succeed and graduate with a Udacity Nanodegree certificate.</p>\n<p class=""chakra-text css-o3oz8b"">We value the trust you have put in us by making this investment in your future career. We take it seriously and we are here to help you achieve whatever you came here to accomplish.</p></div>']",[],https://www.youtube.com/embed/gd0Z0S58Y68
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,Lesson 1: Java Web Developer Nanodegree Orientation,1.3  How to Succeed,[],[],https://www.youtube.com/embed/hVwUijsLKzw
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.1  Getting Help,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As questions come up during this course, click on the Help button on the left sidebar of your classroom. You’ll see four options, each for a separate type of support:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Technical Mentor Help</strong>: is available on Knowledge, our expert Q&amp;A platform, by clicking on ""Mentor Help"". You can search for answers to questions similar to yours or post new questions related to your project or lessons. Udacity’s expert technical mentors answer all new questions.</li><li class=""css-cvpopp""><strong>Udacity Support Community:</strong> Receive peer support and find answers to your non-technical questions quickly through <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">Udacity Support Community<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Receive peer support from our global community of lifelong learners that help each other succeed by sharing their experience and expertise. Start a discussion <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><strong>General Account Help</strong>: This is where you can get details on non-technical issues such as 3rd party tools, billing, deadlines, and more. You can even find additional help here via. live chat. Simply click on Account Help or visit our <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc"">Help Center<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to find answers.\n.</li></ul></div>']",[],
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.2  Mentor Help,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Technical Mentor Support</strong>: is provided through Knowledge, our expert Q&amp;A platform. You can search for answers to questions similar to yours or post new questions related to your project or lessons. <strong>Udacity’s expert technical mentors answer all-new questions.</strong></p>\n<h3 class=""chakra-heading css-k57syw"">How to Use Knowledge</h3>\n<p class=""chakra-text css-o3oz8b"">To ensure you’re getting the quality and prompt support you need, it’s helpful to follow these best practices and guidelines for Knowledge.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Search for Similar Existing Questions</strong>:\nwith tens of thousands of students enrolled in our programs, many of your questions may have already been asked and answered. To look for existing answers to similar questions that may provide the immediate support you need, use the <strong>filter on the left side of your screen</strong> to select your course and related project or write in the key terms related to your question in the <strong>search bar</strong> at the top of the page.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Ask a New Question</strong>:\nif you want to ask a new question, select “Ask a Mentor” at the top of the page. Kindly remember that Knowledge is for technical questions only; for other types of support and feedback, please write to support at <a class=""chakra-link css-190botj"" href=""mailto:support@udacity.com"">support@udacity.com<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">When you ask a new question, the platform immediately assigns it to one of our expert mentors spread across the globe to ensure prompt replies. Of note, when a mentor answers your question, you will see “Mentor” next to their name to differentiate their support from comments your fellow learners may also provide.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If you don\'t see your question, simply create a new post. You are likely to get an answer within 24 hours and you\'ll be helping future students who may encounter the same problem.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to Ask a Good Question?</h3>\n<p class=""chakra-text css-o3oz8b"">Students that follow these tips typically receive the strongest initial support and avoid back-and-forth with mentors:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Ask Specific Questions</strong>: if you have closely related questions that form part of a general theme, it’s okay to ask them all together. But consider using bullet points to separately list each of the questions in your post. Keeping your questions organized helps ensure mentors provide clear answers to each specific question. If your questions are less closely connected, it’s best to submit new, separate questions for each one.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Provide Details and Links:</strong> explaining what (if anything) you’ve already attempted to solve the problem helps mentors know where to start when answering your question. Likewise, if your question is not related specifically to a project, but rather to an exercise, quiz, or lesson, it’s helpful to include information such as lesson or quiz name, screenshots, and classroom links.</p>\n</li></ul>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Overall the key to asking a good question is to imagine yourself trying to answer your own question. Imagine you were coming to it without any prior knowledge. Does the question make complete sense? Or are there gaps around the context?</p>\n</blockquote>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Start with a Clear Question Title</strong>: attempt to summarize your entire question in one sentence. You may even write the title at the end, just before posting the question. This will help you summarize the issue before you include details in the question itself.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Share Code Correctly</strong>:  by using the “Code Block” option to properly format your code. If your question concerns a piece of external code, include a link to the file on Github.</p>\n</li></ul>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">In fact, Github lets you create a link to a specific line in a file.  To do so, just click to the left of the line number, and then select <em class=""chakra-text css-o3oz8b"">copy permalink</em> in the ellipsis that appears in the margin. Paste the <em class=""chakra-text css-o3oz8b"">permalink</em> right into the Github box on your question submission form.</p>\n</blockquote>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Figuring out Errors</strong>: if your question is about an error message or stack trace, include the entire error message, by either formatting the error message using the “Code Block” option or creating a Gist or a Paste on Pastebin, and including a link to it in the description.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Avoid Screenshots of Code or Error Messages</strong>: do not use screenshots of code or error messages. They are hard to read and the text cannot be copied to debug it.</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">If you receive a helpful answer, kindly select it as the “accepted answer.” For questions from other students, if you see other helpful answers kindly select the “upvote” option. Conversely, if you don’t think an answer strongly answers a question, select the “downvote” option.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Getting Additional Support</h3>\n<p class=""chakra-text css-o3oz8b"">At times, students want support from a different mentor. As everyone learns differently, we want to make this a simple process for learners like you.</p>\n<p class=""chakra-text css-o3oz8b"">If you receive an answer that you are not satisfied with and want a different mentor to chime in, kindly select the option at the top of the page in Knowledge. If you reply directly in the comments section, without clicking on the link at the top of the page, your question will not be answered by another mentor.</p></div>']","['https://video.udacity-data.com/topher/2020/May/5ebeb959_knowledge1/knowledge1.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb9eb_k2/k2.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb997_image2/image2.png', 'https://video.udacity-data.com/topher/2020/May/5ebeb954_lastimage/lastimage.png']",
Java Web Developer,COURSE 1:Welcome to Java Web Developer Nanodegree Program,"Lesson 2: Knowledge, Community, and Careers",2.3  Udacity Support Community,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Welcome to Udacity’s Support Community!</strong></p>\n<p class=""chakra-text css-o3oz8b"">Become a part of our global community of lifelong learners that help each other succeed by sharing their experience and expertise. Receive peer support and find answers to your non-technical questions quickly through Udacity Support Community.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Find answers to your questions</strong></p>\n<p class=""chakra-text css-o3oz8b"">Search Udacity Support Community for answers to commonly asked questions.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Receive peer support</strong></p>\n<p class=""chakra-text css-o3oz8b"">Ask the community by posting a question and following discussions.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Share your expertise</strong></p>\n<p class=""chakra-text css-o3oz8b"">Get recognized for sharing your insights, experiences, and tips with fellow learners.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Checkout status of your Support tickets</strong></p>\n<p class=""chakra-text css-o3oz8b"">Manage and streamline your view of the support tickets, community conversations, and people you follow in the \'My Profile\' section.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Solved, helpful, and recommended posts</strong></p>\n<p class=""chakra-text css-o3oz8b"">Let other learners know which posts solved your problem, highlight helpful responses, and get the answers you want faster with recommended posts.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Build your reputation in the community</strong></p>\n<p class=""chakra-text css-o3oz8b"">Explore and participate in Support Community programs to earn points, levels, and badges. Have fun and unlock rewards along the way.</p>\n<h3 class=""chakra-heading css-k57syw"">Join the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://udacity.zendesk.com/hc/en-us/community/topics"">Support Community<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> now</h3></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.1  Meet Your Instructor,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hi, everyone! My name is <strong>Peter Zastoupil</strong>.</p>\n<p class=""chakra-text css-o3oz8b"">I\'m an enterprise software developer and teacher at Cook Systems, an IT solutions and training company. My background includes many languages and tools, but Java and Spring are two of my oldest skills. I\'m excited to share them with you!</p></div>']",[],https://www.youtube.com/embed/NaWbj5NxxtA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.2  Prerequisites,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To get the most out of this course, you should already be familiar with the basics of Java, SQL, and IDEs.</p>\n<p class=""chakra-text css-o3oz8b"">If you\'re looking to get started with Java, Udacity has a free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/java-programming-basics--ud282"">Java Programming Basics<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course, which as a bonus introduces IntelliJ IDEA as an IDE. Another resource is the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/index.html"">Java Tutorials<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> from Oracle. These are also an excellent reference, especially if you\'re already familiar with another language and just need to know what\'s different in Java. That being said, we do expect you to be very familiar with Java in this course, so proceed at your own risk if you\'re attempting to come here from another language!.\nIf SQL is a no for you: check out Udacity\'s free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/intro-to-relational-databases--ud197"">Intro to Relational Databases<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course, where you\'ll learn both to design and query SQL databases.</p>\n<p class=""chakra-text css-o3oz8b"">If IntelliJ IDEA is new territory, you can take a look at their <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/idea/features/"">feature overview<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> to get a sense of what\'s possible. Note that we will be using the open-source Community Edition of IntelliJ in lessons. If you want to pay for the Ultimate Edition, you are free to, but it is not required. If IDEs are new to you entirely, check out the last lesson of Udacity\'s free <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/java-programming-basics--ud282"">Java Programming Basics<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> course for an introduction.</p></div>']",[],https://www.youtube.com/embed/3wJW64VN5GI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.3  Introduction,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Web Development means building web applications, and in a standard web application, there are three main components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Data Storage</li><li class=""css-cvpopp"">Application Logic</li><li class=""css-cvpopp"">Client Access</li></ul>\n<p class=""chakra-text css-o3oz8b"">By the end of the course, you\'re going to learn how to build and manage each of those components in Java using Spring Boot.</p>\n<h3 class=""chakra-heading css-k57syw"">Data Storage</h3>\n<p class=""chakra-text css-o3oz8b"">Some of those beans will be responsible for interacting with the database. We will be using a SQL database called H2, which is an in-memory SQL database hosted by Spring Boot. You\'ll learn to use MyBatis, a Java library for database interaction, to generate data-access beans, which will be used by other services in your application logic to satisfy client requests.</p>\n<h3 class=""chakra-heading css-k57syw"">Application Logic</h3>\n<p class=""chakra-text css-o3oz8b"">Application logic manages client access and database interaction. For this course, you\'re going to learn how to use Spring Boot to maintain a collection of beans, which are small components of application logic that can interact with each other to carry out complex tasks.</p>\n<h3 class=""chakra-heading css-k57syw"">Client Access</h3>\n<p class=""chakra-text css-o3oz8b"">The client that will access our application is a web browser, which will send HTTP requests to our app and usually expects HTML in return. Using Spring MVC and Spring Security, libraries provided to us by Spring Boot, you will learn to create special beans called <em class=""chakra-text css-o3oz8b"">controllers</em> that you can configure to respond to client requests and generate HTML responses. Controllers act as the entry points of your application, from a client\'s perspective.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Architecture of a Web Application</strong>: Notice which Spring concepts intersect with which roles!</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed7eb47_l0-10-intro-to-web-development/l0-10-intro-to-web-development.jpg'],https://www.youtube.com/embed/9O5ywNRPecE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.4  Why Java Web Development,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Learning web development is valuable because it\'s how the digital apps and services that we use every day are built. Being able to visualize the architecture of a web application will make you a better developer and give you tools to use when turning an app idea into reality.</p>\n<p class=""chakra-text css-o3oz8b"">Learning Java is valuable because it\'s a widely-used industry mainstay, and it has a massive community of developers and open-source projects, like Spring Boot. Learning Spring Boot matters because it\'s a core Java library that supports and defines language-wide best practices. Mastery of Spring will make you an excellent Java developer and expose you to the Java-standard solutions to a wide range of common problems. Learning to recognize those common problems will make you a better developer. Wherever you go, whatever language you use, the same problems will arise, and you\'ll know what kind of solutions to look for.</p></div>']",[],https://www.youtube.com/embed/k-cTY5niqNc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.5  Business Stakeholders,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a professional development team, many people are involved in the choice of language and framework:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Developers</strong> who write the code.</li><li class=""css-cvpopp""><strong>Testers</strong> who write and run tests.</li><li class=""css-cvpopp""><strong>Designers</strong> who create prototypes for the developers to implement.</li><li class=""css-cvpopp""><strong>Project Architects</strong> who choose the technologies best suited to a project\'s requirements</li><li class=""css-cvpopp""><strong>Business Analysts</strong> who write technical specifications for the developers to follow.</li><li class=""css-cvpopp""><strong>Project Managers</strong> who plan development efforts.</li></ul>\n<p class=""chakra-text css-o3oz8b"">This course is for anyone in these roles who is looking to do web development with Java and Spring.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How the Choice of Java and Spring Affects Members of a Development Team</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80359_l0-18-business-stakeholders/l0-18-business-stakeholders.jpg'],https://www.youtube.com/embed/SZ7VPAzBVpc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.6  Spring vs Spring Boot,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.7  When to Use Spring Boot,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When deciding if the topics you will learn in this course are a good fit for a project you\'re working on, consider your environment, project features, and testing goals.</p>\n<p class=""chakra-text css-o3oz8b"">If you feel comfortable with Java and your environment supports it, it\'s a great language for any size project. But if you need ultra-high performance, a bare-metal language like C, C++, Rust, or Go might be a better choice.</p>\n<p class=""chakra-text css-o3oz8b"">If your project aims to connect simultaneous users on different clients, you probably need to build a server, which Spring Boot can help with. If you\'re making a website with dynamic data, Spring Boot provides <strong>Thymelea</strong>f as an HTML template engine. If you store and manage data in a database, Spring Boot supports a plethora of Java libraries that provide database access, including <strong>MyBatis</strong>, which we cover in this course. As long as you need a server, Spring Boot is probably the right choice.</p>\n<p class=""chakra-text css-o3oz8b"">If you need to test your application by automating a web browser, <strong>Selenium</strong> is the industry standard. There are libraries for many languages to use Selenium, and Java is one of them. Selenium also has integrations with Spring Boot that make testing server behavior a breeze.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following projects is not a good fit for Java and Spring Boot?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A graphics processing application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An e-commerce website</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A note-taking app</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An online video game</p></div>']",[],https://www.youtube.com/embed/_uzSCyHH42U
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.8  History,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Networked computing has existed for nearly sixty years. First, specific programs were designed to speak to each other, but over the years several standards for different data protocols were established. In this era, the server/client dichotomy reigned supreme, with specialized server and client programs developed for individual network tasks like file sharing and email exchange. This changed with the development of the world wide web, HTTP, and HTML. As web sites became more complex, the web servers took on more and more roles as the mediator between the user\'s browser and other relevant services. This amalgamation of web server responsibilities coincided with the release and popularity of Java, which was soon accompanied by official web servlet and application container specifications which solved common problems when constructing complex, feature-rich web servers.</p>\n<p class=""chakra-text css-o3oz8b"">With the rise of the web, software developers began to meet and share ideas in open source communities online. These groups developed useful tools and utilities, including Spring, which aimed to build on Java\'s rich server architecture and provide a boilerplate-free enterprise development experience. It has grown into an industry standard, and an umbrella project that supports a vast array of powerful utilities and frameworks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check all the factors that directly led to the rise of Spring.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">TCP/IP</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open Source Communities</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Network Engineers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Containers</p></div>']",[],https://www.youtube.com/embed/VJfJFGOwPxE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.9  Course Outline,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Structure of this Course and the Dependencies between Lessons</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Course Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Basics of <strong>Java server architecture</strong>, dependency management in Java, and how Spring integrates with both.</li><li class=""css-cvpopp""><strong>Core Spring principles</strong>. We\'ll be covering dependency injection, bean configuration, service development, and server-wide configuration.</li><li class=""css-cvpopp""><strong>Spring MVC and Thymeleaf</strong>, an HTML template engine. We\'ll talk about Spring controllers, Thymeleaf template attributes, and connecting the two with the MVC pattern.</li><li class=""css-cvpopp""><strong>Connecting your Spring app to a database</strong> and securing it with <strong>Spring Security</strong>. We\'ll cover the basics of ORM and MyBatis, an ORM tool for Java. We\'ll use the database to store user credentials securely and use them to authenticate users with Spring Security.</li><li class=""css-cvpopp""><strong>Testing and web browser automation with Selenium</strong>. We\'ll cover how to set up and run tests with JUnit, how a web driver works, and how to simulate user actions in the browser with Selenium. We\'ll also discuss page objects, Selenium\'s powerful abstraction tool.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed805e9_l0-30-course-outline/l0-30-course-outline.jpg'],https://www.youtube.com/embed/6y49Lv8u9b8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,"1.10  Tools, Environment & Dependencies","['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To get the tools required for this course:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Download the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.oracle.com/java/technologies/javase-downloads.html"">JDK 15<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Accept the license agreements and run the downloaded installer.</li><li class=""css-cvpopp"">Download the Community Edition of <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/idea/download/"">IntelliJ IDEA<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. Run the downloaded installer.</li><li class=""css-cvpopp"">Make sure you have a modern web browser installed. We recommend <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.google.com/chrome/"">Google Chrome<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As you set up your system for the course, check the tasks off the list below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download and install JDK 15.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download and install IntelliJ IDEA Community Edition.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Check if you have a modern web browser installed. If not, install Google Chrome.</p></div>']",[],https://www.youtube.com/embed/RZS0KjxRcYg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.11  Project: SuperDuperDrive,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The End Product of the Project</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">For the final project of the course, you\'re going to put all of your skills to the test to build a fully-functional web app with Spring Boot. You\'ll be developing a personal storage app that allows users to store files, personal notes, and website credentials securely for a new company in the cloud storage business, <strong>Super<em class=""chakra-text css-o3oz8b"">Duper</em>Drive</strong>. You\'ll have some help, in the form of a database schema and website prototype HTML files provided by your tech lead at the company. You\'ll be responsible for developing the registration, login, and data storage features of the application, as well as writing tests to verify the app is feature-complete.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80794_superduperdrive/superduperdrive.png'],https://www.youtube.com/embed/cLvTm8qKeKc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.12  Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Overview of Curriculum Goals and Applications</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this course, we\'re going to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Build web apps with Java and Spring Boot.</li><li class=""css-cvpopp"">Learn what a Java web server is and how to build applications for it with Spring.</li><li class=""css-cvpopp"">Present our applications on the web with Thymeleaf and Spring MVC, and we\'ll connect to a database to store user data with MyBatis.</li><li class=""css-cvpopp"">Learn how to secure our website with Spring Security and test it with JUnit and Selenium.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Together, these skills are going to allow us to build secure, maintainable, and reliable web applications with ease. You\'ll be capable of taking on any web development scenario with confidence, especially one that involves registering and authenticating users, storing user-submitted data, and allowing the user to access and edit their data through a web site. Something like a file-storage app, perhaps?</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed989cf_l0-42-recap/l0-42-recap.jpg'],https://www.youtube.com/embed/OLNq1QU84UE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 1: Introduction to Spring Boot,1.13  Good Luck!,[],[],https://www.youtube.com/embed/25HzguEoP5s
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.1  Web Development in Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>This Lesson is Your Introduction to Java Web Development</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<p class=""chakra-text css-o3oz8b"">In this lesson, you\'ll be introduced to the following ideas and tools:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Java Application Servers:</strong> We introduce the basics of server-side web development and how a Java Application Server simplifies things.</li><li class=""css-cvpopp""><strong>Java Servlets:</strong> We discuss the central feature of the Application Server, the Servlet, and how it allows developers to access the conveniences provided by the Application Server.</li><li class=""css-cvpopp""><strong>Spring Applications:</strong> We introduce Spring Framework, a collection of Java libraries and tools that build on the Application Server and Servlet to provide a huge amount of utility to Java web developers.</li><li class=""css-cvpopp""><strong>Spring Starter Packs:</strong> We discuss the various ""starter packs"" available through Spring Boot\'s project generator, which can be used to quickly get up and running with a new Spring Boot project configured for specific features.</li><li class=""css-cvpopp""><strong>Maven and the POM file:</strong> We introduce Maven, a dependency management tool for Java that allows developers to easily use powerful open-source libraries in their projects. We discuss how dependencies are declared in Maven\'s <code class=""chakra-code css-1u83yg1"">pom.xml</code> file.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Source Code</h3>\n<p class=""chakra-text css-o3oz8b"">All the code examples and exercise solutions of the current course (all lessons) are available in this <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples"">Github repository<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.\nWe recommend you to download the course repository to look at the code examples present in the <code class=""chakra-code css-1u83yg1"">udacity-jwdnd-c1-snippets-master</code> directory in conjunction with watching the demonstration-videos.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - In the Github repository, the lesson and exercise numbers start from 0, just like it does in array-indexes.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">How to download a Git repository</h3>\n<p class=""chakra-text css-o3oz8b"">If you are not familiar with Git, refer to our free course <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.udacity.com/course/version-control-with-git--ud123"">Version Control with Git<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and learn about basic commands, such as <code class=""chakra-code css-1u83yg1"">init</code>, <code class=""chakra-code css-1u83yg1"">clone</code>, <code class=""chakra-code css-1u83yg1"">add</code>, <code class=""chakra-code css-1u83yg1"">commit</code>, and <code class=""chakra-code css-1u83yg1"">push</code>, which you may need moving forward.</p>\n<p class=""chakra-text css-o3oz8b"">In general, the steps for downloading (clone) a Github repository are:<br>\n<strong>Step 1.</strong> Download and install the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://git-scm.com/downloads"">Git for your OS<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <br><br>\n<strong>Step 2.</strong> Open terminal (macOS/Linux) or Git Bash (Windows). <br><br>\n<strong>Step 3.</strong> Run the following commands:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-bash"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Change your directory</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span>path to a directory where you want to download the repository</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&gt;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Download the repository</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">git</span><span> clone https://github.com/udacity/nd035-c1-spring-boot-basics-examples.git\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># Go inside the downloaded repository</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">cd</span><span> nd035-c1-spring-boot-basics-examples\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;""># List the files in the current directory</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">ls</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><strong>Once downloaded, you can import the downloaded repository (or sub-folders) into the IntelliJ IDE to view, and run the application code.</strong></p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - Github doesn\'t support downloading <em class=""chakra-text css-o3oz8b"">only</em> a sub-folder from a Github repository, although there are workarounds available. Instead, Github allows us to download the entire repository.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Recommendation</h3>\n<p class=""chakra-text css-o3oz8b"">In the IntelliJ IDE, create a separate project for each new exercise you will practice in this course.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed80dde_l1-lesson-outline/l1-lesson-outline.png'],https://www.youtube.com/embed/t0Oj-CM31XE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.2   Programming for the Web in Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How a Java Application Server Connects Applications to the Web</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A web server\'s primary role is listening for HTTP requests and handling them with application logic, sending an HTTP response to the client that indicates the result of the operation. Simple HTTP servers host directories of HTML files directly, sending files in response to requests for specific URLs. This is enough for static websites with no dynamic server operations, but modern web apps support users accounts, complex interactions, and persistent data. Java application servers make these features more accessible by hosting many individual applications, managing them over a common interface, the servlet. This allows developers to focus on application logic and features, with HTTP request handling and routing handled by the server.</p>\n<p class=""chakra-text css-o3oz8b"">Spring provides additional sets of libraries that integrate with the servlet interface to provide applications with even more utilities that focus on database access, security, and HTML generation, and it\'s the tool we\'ll use to build our web applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose the correct statement about Java Application Servers and their place in web development.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They allow developers to share open-source libraries</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They host many specialized applications in parallel</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">They host HTML files for web browsers</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some services that Spring helps manage for us?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Login Security</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTML Generation</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Responding to Browser Requests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database Access</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Running Multiple Java Programs in Parallel</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTTP Request/Response:</strong> HTTP, or <strong>H</strong>yper<strong>T</strong>ext<strong>T</strong>ransfer<strong>P</strong>rotocol, is a binary data format for communication between programs over the web. It can be broken down into two basic message types: requests and responses. Clients send requests for resources to servers, which respond with the requested data. <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/HTTP/Messages"">Read more about the protocol here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><strong>HTTP <code class=""chakra-code css-1u83yg1"">GET</code> and <code class=""chakra-code css-1u83yg1"">POST</code>:</strong> Every HTTP request has an important header that determines its <em class=""chakra-text css-o3oz8b"">method</em>. <code class=""chakra-code css-1u83yg1"">GET</code> and <code class=""chakra-code css-1u83yg1"">POST</code> are two of the most common; <code class=""chakra-code css-1u83yg1"">GET</code> indicates a request for data from the server, and <code class=""chakra-code css-1u83yg1"">POST</code> represents a request to ""post"" new data to the server - this usually represents some action on server data like submitting search terms, posting an update, or adding new data to the server.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed8365b_l1-06-big-picture/l1-06-big-picture.jpg'],https://www.youtube.com/embed/JI6cbTaOapQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.3  Web Development with Java,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When building a web application, there are a lot of helpful tools that can solve common problems for you. How do you decide what you need to implement a given feature?</p>\n<p class=""chakra-text css-o3oz8b"">Since we\'re going to be building web apps with Java and Spring boot, the first step is to research what Spring supports and recommends for that feature. <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects"">Spring\'s website<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> includes documentation and examples for a wide range of features and libraries, and is a great place to start. Once you\'ve decided on a library to use, the next step is finding its website and documentation. Most open-source libraries have extensive documentation that covers getting started, usage examples, and complete references. You can use these resources to implement your feature and debug issues along the way. Finally, if you encounter issues that documentation alone can\'t solve, you should search Google for to find similar issues and solutions others have encountered.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the stage of development to the next step you should consider at that stage.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Starting a new feature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Research if and how Spring supports the feature</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using a library for the first time</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Read the library\'s getting-started documentation and usage examples</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Debugging a feature that uses a library</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Review the library\'s reference documentation and search the web for similar issues</p></div>']",[],https://www.youtube.com/embed/VYA8VzMDJ90
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.4  Java Application Server,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Java Application Server is a <em class=""chakra-text css-o3oz8b"">pluggable architecture</em> that can host many deployed applications at once. It provides utilities like multi-threading, request filtering, and resource sharing to each application. Those applications must expose endpoints that handle the requests routed to them by the server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Structure of a Java Application Server</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTTP</strong>: Hypertext Transfer Protocol. A binary protocol that originally defined the mechanics of requesting and sending HTML over the internet.</li><li class=""css-cvpopp""><strong>Web Server</strong>: A program that listens for and responds to HTTP requests over the internet</li><li class=""css-cvpopp""><strong>Application Server</strong>: A program that hosts other applications, forwarding incoming requests to the appropriate application according to a filter. Provides shared access to resources and multi-threading.</li><li class=""css-cvpopp""><strong>Pluggable Architecture</strong>: A pluggable architecture refers to any piece of software that allows parts of it to be added, replaced, and removed. Usually, this is achieved through a common interface for every ""pluggable"" component. Sometimes the architecture can even replace components at runtime, as is the case with Servlets in an Application Server.</li><li class=""css-cvpopp""><strong>Threads/Threading</strong>: These terms come from concurrent programming - a thread is essentially one track of computation, and multi-threading is running multiple threads in parallel. This gets a little complicated because your CPU has a limited number of physical cores that can process instructions in parallel, while the number of threads you can have can be many more than your computer has cores, but that\'s a topic for another time!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Oracle documentation for <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/overview005.html#BNABO"">Java EE Containers/Servers<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed836cc_l1-16-the-java-application-server/l1-16-the-java-application-server.jpg'],https://www.youtube.com/embed/eggveTIXAx0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.5  Java Application Server Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the role of HTTP when your browser makes a request for a web page?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol for creating the web page returned by the request</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol for formatting web requests so that your Application Server can understand them</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP is a protocol describing how the Application Server talks to your application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Choose the correct benefits of a Java application server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It automatically handles multiple client connections simultaneously.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can be configured to forward requests with custom logic.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can share heavyweight or universal components with each of its applications.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can display web pages by itself.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can respond to HTTP requests with application data by itself.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.6  Java Servlets,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">Servlet</code> class is the main connection between the apps you develop and the application server they run on. By extending <code class=""chakra-code css-1u83yg1"">Servlet</code>, you can create endpoints that handle incoming requests in a way specific to your application needs, and you can map specific request URLs to specialized servlets by adding entries to a <code class=""chakra-code css-1u83yg1"">web.xml</code> file. The app server uses this configuration to instantiate and manage your servlets. It interacts with each through three standard methods, <code class=""chakra-code css-1u83yg1"">init</code>, <code class=""chakra-code css-1u83yg1"">service</code>, and <code class=""chakra-code css-1u83yg1"">destroy</code>:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">service</code> is where requests are handled, and the server will call this method when a request is routed to the servlet it\'s called on.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">init</code> is where initialization of the servlet is handled, and the server will call this method directly after instantiating the servlet.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">destroy</code> is where servlet resource cleanup is handled, and is called directly before the server terminates the servlet instance.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Lifecycle of a Servlet in an Application Server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">A quick note on Java Application Files:</h3>\n<p class=""chakra-text css-o3oz8b"">When you compile a Java program and <em class=""chakra-text css-o3oz8b"">package</em> it to be run, the Java compiler creates what is called a <strong>J</strong>ava <strong>AR</strong>chive, or JAR file. This file contains a compressed file hierarchy, with folders that represent Java packages that contain Java <code class=""chakra-code css-1u83yg1"">.class</code> files, which are the compiled versions of <code class=""chakra-code css-1u83yg1"">.java</code> source code files. It can also contain arbitrary resource files, either at the root level or deeply nested in the package hierarchy. These files often contain metadata related to the app or library contained in the JAR file, which can be read by any program that interacts with the JAR.</p>\n<p class=""chakra-text css-o3oz8b"">When you want to deploy an app to an app server, you have to package it as a <strong>W</strong>eb application <strong>AR</strong>chive, or WAR file. A WAR file is almost identical to a JAR file, but includes configuration files specific to web applications. When we copy a WAR file into the deployment directory of an app server, the server unpackages it, looks for a <code class=""chakra-code css-1u83yg1"">web.xml</code> file, and uses that file to find the classes and resources required by the application. This uses advanced Java features like reflection and class loading to programmatically load Java class definitions and instantiate them which is quite a nifty trick! It allows us to dynamically load, start, stop, and replace any number of applications in a web server at any time.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Endpoints</strong>: An <em class=""chakra-text css-o3oz8b"">endpoint</em> is the address at which a client can reach a specific part of a server\'s functionality. Usually, this is a URL path, the <code class=""chakra-code css-1u83yg1"">/words/and/slashes</code> that follow the domain of a URL, like <code class=""chakra-code css-1u83yg1"">.com</code> or <code class=""chakra-code css-1u83yg1"">.org</code>.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">Servlet</code></strong>: A class defined as a part of the Java: Enterprise Edition specification. Provides an implementable interface for web server request processing, defining a <code class=""chakra-code css-1u83yg1"">service</code> method that the server invokes on an instantiated servlet to handle a <code class=""chakra-code css-1u83yg1"">ServletRequest</code> and <code class=""chakra-code css-1u83yg1"">ServletResponse</code> object for an incoming request. The servlet also defines lifecycle methods for the server to invoke when initializing or destroying a servlet.</li><li class=""css-cvpopp""><strong>JAR</strong>: A Java Archive file, which stores compiled <code class=""chakra-code css-1u83yg1"">.class</code> files in a folder hierarchy that matches the code\'s package structure. Includes an optional manifest file.</li><li class=""css-cvpopp""><strong>WAR</strong>: A variation on the JAR for web applications, which optionally includes web resources like HTML files and configuration files like <code class=""chakra-code css-1u83yg1"">web.xml</code> for servlet registration/mapping.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Official documentation of the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/servlets.html#BNAFD""><code class=""chakra-code css-1u83yg1"">Servlet</code> API<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">Official documentation for the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/en/java/javase/13/docs/api/java.base/java/util/jar/package-summary.html"">Java JAR API<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">Official documentation for <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://javaee.github.io/tutorial/packaging003.html#BCGHAHGD"">packaging WAR files<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed837a2_screen-shot-2020-06-03-at-4.51.26-pm/screen-shot-2020-06-03-at-4.51.26-pm.png'],https://www.youtube.com/embed/DNZVE0NJlZ0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.7  Java Servlets Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What\'s the relationship between the Application Server and a Servlet?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets handle routing HTTP requests to an Application Server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers receive HTTP requests, parse the information, and send it to all the Servlets at once.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets request information from the Application Server when a new HTTP request arrives.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers receive HTTP requests, parse the information, and decide which Servlet should receive a request object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements are true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Servers can execute any methods of your Application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The init method of your Servlet is called only once, after being instantiated.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The service method of your Servlet can be called many times.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The HTTP requests received by the Application Server indicate which Servlet should process them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An Application Server can load Servlets from a WAR file at any time.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.8  Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring is an <em class=""chakra-text css-o3oz8b"">application framework</em>, which means that instead of choosing when to invoke it from your application, you choose when it invokes your application code. This pattern of software development is called Inversion of Control (IoC), and it\'s powerful because it allows developers to develop specialized application components and use Spring to connect them with each other using dependency injection. This is good for clean, separated code and for code reuse. This is evident when looking at the vast number of Spring modules and Spring-integrated third-party tools that are available. This course focuses on a few of them:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Spring MVC</strong>, a generic web controller library for Spring that supports a wide variety of utilities to simplify the handling of HTTP requests</li><li class=""css-cvpopp""><strong>Thymeleaf</strong>, a third party template engine that can integrate with Spring MVC to simplify the generation of web pages as responses to HTTP requests</li><li class=""css-cvpopp""><strong>Spring Security</strong>, a generic authentication library for Spring that can integrate with many different credential sources and authentication protocols to automatically manage request authentication and security contexts</li><li class=""css-cvpopp""><strong>MyBatis</strong>, a third-party database access library that provides simple SQL/Java mapping tools that can be defined in Spring components</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">The End of Boilerplate: Spring Boot</h3>\n<p class=""chakra-text css-o3oz8b"">So Spring adds a lot of features, but it still sounds like a lot of configuration. We still have to deploy it to an application server, right? And we still have to create a servlet for Spring to live in. It also sounds like getting all of these modules and utilities to work together might take some work.</p>\n<p class=""chakra-text css-o3oz8b"">In the past, Spring did require a lot of configuration, but over time, the development world has moved towards a convention-over-configuration approach. Spring Boot is a project that provides an a-la-cart Spring experience, complete with a web page for generating and downloading starter projects based on the application needs. Most Spring Boot applications today also contain an embedded application server with a default, pre-configured servlet definition. All you have to do to run your Spring-enabled code as a server is to run a main method.</p>\n<p class=""chakra-text css-o3oz8b"">With the rise of containerized architectures like Docker, this style of application development has become as popular as the pluggable application server, and in this course, we\'ll be exclusively using this mode. However, if you do want to deploy your Spring Boot application to a traditional application server, there are built-in tools that allow you to package the application as a standard WAR file.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>IoC</strong>: Inversion of Control, which is the practice of designing libraries as <em class=""chakra-text css-o3oz8b"">application runners</em>. This allows developers to focus on application-specific logic and rely on IoC containers to connect application components with one another, eliminating a lot of boilerplate and encouraging a clean separation of development concerns.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Inversion of Control still seem a little hard to conceptualize? <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.youtube.com/watch?v=vFzP2SaMyA0"">Watch this video<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> from Udacity for a dead-simple explanation of the basics.</li><li class=""css-cvpopp"">Official Spring framework <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/"">website<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp"">An <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.martinfowler.com/articles/injection.html"">article<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> about Inversion of Control by Martin Fowler from the beginning of the pattern\'s popularity.</li></ul></div>']",[],https://www.youtube.com/embed/Cla07Uh3Ctc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.9  Spring Applications Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What’s the relationship between Spring and a Java Application Server?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring dispatches Servlet requests from the Application Server to specific Java code to handle the requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring instantiates specific Servlets for each request based on definitions the web.xml file.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Application Server instantiates Spring whenever it receives a web request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inversion of Control is one of the main features of Spring. It allows Spring to manage instances of dependencies and provide them when needed.</p>\n<p class=""chakra-text css-o3oz8b"">We could say that Spring’s ability to inject dependencies is just like the Application Server’s ability to provide what?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HTTP Responses</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Endpoints</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Servlets</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database Connections</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring provides a lot of additional features that can help us receive requests and create responses. What are some things Spring can help us do?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use templates to generate webpages as responses to HTTP requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manage security contexts and authenticate requests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Route HTTP requests to specific application code.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Inject object instances into services that need to use them.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.10  Exercise: Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here is the list of parameters that you can specify at <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">start.spring.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> before generating the project zip:</p>\n<h4 class=""chakra-heading css-1dlhxqh"">General Configuration</h4>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Parameter</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Project (dependency management system)</td><td class=""css-1eywhk4"">Maven</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Language</td><td class=""css-1eywhk4"">Java</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Spring Boot version</td><td class=""css-1eywhk4"">Choose a stable version, <code class=""chakra-code css-1u83yg1"">2.3.0</code> or higher</td></tr></tbody></table></div>\n<h4 class=""chakra-heading css-1dlhxqh"">Project Metadata</h4>\n<p class=""chakra-text css-o3oz8b"">Though you can choose the values of your choice, here are sample values for your first Spring application:</p>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n<div class=""chakra-table__container css-136ya47""><table class=""chakra-table css-d6z7i8""><thead node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><th class=""css-zl9m57""><strong>Parameter</strong></th><th class=""css-zl9m57""><strong>Value</strong></th></tr></thead><tbody node=""[object Object]"" class=""css-0""><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Group</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">com.udacity.jdnd</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Artifact</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Name</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Description</td><td class=""css-1eywhk4"">Type the description of your choice, such as <code class=""chakra-code css-1u83yg1"">My first project for Spring Boot</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Package name</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">com.udacity.jdnd.course1</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Packaging</td><td class=""css-1eywhk4""><code class=""chakra-code css-1u83yg1"">Jar</code></td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Java version</td><td class=""css-1eywhk4"">Select the Java version installed on your system.</td></tr><tr class=""css-1ijbxy6""><td class=""css-1eywhk4"">Dependencies</td><td class=""css-1eywhk4"">Select <strong>Spring Web</strong>. This dependency is used for building RESTful web applications using Spring MVC. <br> It uses Apache Tomcat as the default embedded container.</td></tr></tbody></table></div></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Set up a new Spring Boot project:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Navigate to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https:%5Cstart.spring.io"">start.spring.io<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> in your browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Select a group, artifact, name, Java version, and packaging of your choice. For example, you could set the group to <code class=""chakra-code css-1u83yg1"">com.udacity.jdnd</code> and have your project named <code class=""chakra-code css-1u83yg1"">course1</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add the dependency <strong>Spring Web</strong>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Click the ‘Generate’ button at the bottom of the page to download the project. Extract it to the location you want your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open IntelliJ IDEA.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">From the File menu, select Open and then navigate to the location you extracted your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the Project structure pane, navigate to the only class in the project. If you used the names above, this will be <code class=""chakra-code css-1u83yg1"">com.udacity.jdnd.course1.Course1Application.java</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Right click this class and run it. This should launch the application.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.11  Solution: Spring Applications,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Initializr</h3>\n<p class=""chakra-text css-o3oz8b"">This is a helpful page for generating our starter projects. Here’s an example of the configuration for a simple starter project using Spring Web:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Example Spring Initializr Configuration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Once you’ve generated the starter project, open it in IntelliJ using the File menu and selecting Open. You can open a directory and IntelliJ will create a new project and import your dependencies.</p>\n<p class=""chakra-text css-o3oz8b"">Navigate to the package <code class=""chakra-code css-1u83yg1"">src/main/java/com.udacity.jdnd</code> and find the <code class=""chakra-code css-1u83yg1"">Course1Application.java class</code>. This is the main class that launches the Spring Boot application. You can run it by simply right clicking on it and choosing “Run Course1Application.java”.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed92bd2_screen-shot-2020-06-04-at-10.12.47-am/screen-shot-2020-06-04-at-10.12.47-am.png'],https://www.youtube.com/embed/UoiFv7915QQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.12  Spring Starter Packs,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Starter Packs Setup</h3>\n<p class=""chakra-text css-o3oz8b"">Spring is a collection of open-source libraries that solve common web development problems. But how do we get those libraries? In this course, we\'ll be using Maven, a dependency management tool that lets us define dependencies on open-source libraries based on their names and version numbers. We define those in a file in our projects called <code class=""chakra-code css-1u83yg1"">pom.xml</code>, which Maven reads and uses to download the required libraries. We can also have our projects inherit dependencies from some base project, which is a feature that Spring Boot uses to make setting up a new Spring project easy as pie. We\'ll be using Spring Initializr, an online project generator, to choose specific Spring dependencies to add to new Spring projects.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot is best experienced with the help of Spring Initializr, an official project generator. You can use it to configure metadata and build properties of a project as well as what starter dependencies you want to include. These include:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/1.5.16.RELEASE/reference/html/using-boot-devtools.html"">Spring Dev Tools<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: utilities including hot reloading changed code into a running application</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html"">Spring MVC<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: web layer utilities that make developing server-side web apps easy</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects/spring-data"">Spring Data<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>: a common interface for many different types of database access</li><li class=""css-cvpopp"">And <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/projects"">many more<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>\nOnce you\'ve selected your dependencies and chosen your language, build tool, and project identifiers, Spring Initializr will generate a zip file that includes a ready-to-run server with all of the choices you made reflected in its <code class=""chakra-code css-1u83yg1"">pom.xml</code> file, as well as the package structure.</li></ul></div>']",[],https://www.youtube.com/embed/vhDtf0kxPU4
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.13  Spring Starter Packs Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the following fields on the Spring Initializr page to their function:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify whether a project should run as a standalone application or be deployed to an application server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Packaging</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify which external libraries to make available to your program</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Dependencies</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify the project name</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Artifact</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Used to specify the classpath of project artifacts</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Group</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Spring Starter Packs Quiz</h3>\n<p class=""chakra-text css-o3oz8b"">Pretend it’s time to make a new project having a basic user interface, using the Spring Initializr and you must decide <em class=""chakra-text css-o3oz8b"">what requirements to include</em>. Assume that we would include at least <em class=""chakra-text css-o3oz8b"">Spring MVC</em>, <em class=""chakra-text css-o3oz8b"">Thymeleaf</em>, <em class=""chakra-text css-o3oz8b"">Spring Security</em>, and <em class=""chakra-text css-o3oz8b"">MyBatis</em>, as mentioned earlier in this course. Please answer the following quiz question.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following dependencies do you think we should include in a project that wants to use these tools to support REST web services and writes to a PostgreSQL database?</p>\n<p class=""chakra-text css-o3oz8b"">Click the ‘Add’ button on the start.spring.io page to see descriptions of different dependencies.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot DevTools</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Web</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Web Services</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Thymeleaf</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Security</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JDBC API</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MyBatis Framework</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">PostgreSQL Driver</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Integration</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot Actuator</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As the instructions said, we definitely need Thymeleaf, SPring Security, and MyBatis. Thymeleaf requires Spring Web to function, so we need that too. MyBatis requires a database driver, and the only one listed is PostgreSQL, so that needs to be added as well. Finally, Spring DevTools provides valuable utilities for development on any Spring Boot project, so it should be included as well. The other dependencies are either already covered by the dependencies we\'ve listed, or they aren\'t relevant to our goals. JDBC is covered by MyBatis - both are APIs for database access. Spring Integration and Spring Actuator are high-level libraries for coordinating multiple servers or services, and we don\'t need them right now.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.14  Exercise: Spring Starter Packs,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.15  Solution: Spring Starter Packs,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are two ways to add a dependency to your project:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Using the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></strong>: You can look up the values for new dependencies by adding them to a new project in Spring Initializr and then clicking the <strong>Explore</strong> button to browse the pom.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b""><strong>Manually in the IntelliJ IDE</strong>: You can also add dependency elements manually, and IntelliJ will try to find and suggest artifacts that match your entries. The auto-suggest feature is called <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/auto-completing-code.html?keymap=secondary_macos"">Code completion<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</li></ol></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>IntelliJ Suggesting Artifacts When Adding a Dependency to</strong>  <code class=""chakra-code css-1u83yg1"">pom.xml</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s an example <code class=""chakra-code css-1u83yg1"">pom.xml</code> that includes our new dependency:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(153, 153, 153); font-weight: bold;"">&lt;?xml version=""1.0"" encoding=""UTF-8""?&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">project</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">xmlns</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://maven.apache.org/POM/4.0.0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">xmlns:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">xsi</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://www.w3.org/2001/XMLSchema-instance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">xsi:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">schemaLocation</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">modelVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>4.0.0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">modelVersion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>2.2.7.RELEASE</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">relativePath</span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">&lt;!-- lookup parent from repository --&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">parent</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>com.udacity.jdnd</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>course1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>0.0.1-SNAPSHOT</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>course1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">name</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">description</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>My Super Cool Project</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">description</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">java.version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>14</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">java.version</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">properties</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-thymeleaf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-web</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-starter-test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">scope</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">exclusions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">exclusion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.junit.vintage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>              </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>junit-vintage-engine</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">exclusion</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">exclusions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependency</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">dependencies</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">plugins</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>org.springframework.boot</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">groupId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>spring-boot-maven-plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">artifactId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">plugin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>     </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">plugins</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">build</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">project</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>']",['https://video.udacity-data.com/topher/2020/June/5ed92e5d_screen-shot-2020-06-04-at-10.24.03-am/screen-shot-2020-06-04-at-10.24.03-am.png'],https://www.youtube.com/embed/yevgULcdHmk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.16  Edge Case: When You Can't Use Spring Boot,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following scenarios and decide if you can use Spring Boot in each of them. Mark each scenario where Spring Boot is a viable choice.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that already uses Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses Java EE Enterprise Java Beans and JNDI</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses Oracle WebLogic as an Application Server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A project that uses plain Servlets to handle requests</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring Boot is great, but sometimes you’ll have to configure Spring manually or work in an environment where Spring is not available. Which of the following scenarios might result in a configuration that doesn’t use Spring Boot?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project uses Java EE instead of Spring</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project that needs to work with a legacy database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project utilizes many features specific to one application server in particular</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sometimes, it\'s not an option to use Spring Boot in a project. Usually, this is because some form of IoC has already been implemented, or it would take a lot of time to rewrite the code to use Spring Boot. Sometimes, though, it\'s worth adding Spring or Spring Boot to a project by refactoring the code and adding the Spring Servlet manually. More information on this can be found in the Further Research section, but this won\'t be a focus for the course - just remember that it takes a decision and some setup to use Spring in an application, and not all applications do!</p></div>']",[],https://www.youtube.com/embed/274bwKHmqzI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.17  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Each lesson in this course, you will build on a single project, adding more features as we learn about them. For this lesson, you need to set that project up! Create a spring starter project with the dependencies used in this course, and verify the program runs successfully.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Go to <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://start.spring.io/"">Spring Initializr<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> and add the following starter dependencies:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Spring Boot DevTools</li><li class=""css-cvpopp"">Spring Web</li><li class=""css-cvpopp"">Thymeleaf</li><li class=""css-cvpopp"">Spring Security</li><li class=""css-cvpopp"">H2 Database</li><li class=""css-cvpopp"">MyBatis Framework</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Make sure the metadata is set correctly:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">It\'s configured as a Maven project</li><li class=""css-cvpopp"">It\'s configured to use Java</li><li class=""css-cvpopp"">The group id is set to <code class=""chakra-code css-1u83yg1"">com.udacity.jwdnd.c1</code></li><li class=""css-cvpopp"">The artifact id is set to <code class=""chakra-code css-1u83yg1"">review</code></li><li class=""css-cvpopp"">The packaging is set to <code class=""chakra-code css-1u83yg1"">JAR</code></li><li class=""css-cvpopp"">The Java version is 14</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the project somewhere you won\'t forget it!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the main application class and verify that it runs without errors.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.18  Solution: Final Review,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 2: Web Development in Java,2.19  Lesson Conclusion,[],[],https://www.youtube.com/embed/3fwD0T38Ja0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.1  Web Development,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Spring Boot\'s Building Blocks</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Lesson Outline</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Spring IoC Configuration</strong>: We discuss the basic mechanism at the core of Spring, Inversion of Control, and how to configure it for our applications.</li><li class=""css-cvpopp""><strong>Spring Components and Services</strong>: We introduce a mental model for developing with Spring, built around classes that we define called components and services.</li><li class=""css-cvpopp""><strong>Server-Wide Configuration</strong>: We learn how to configure certain server-wide properties of a Spring Boot application.</li><li class=""css-cvpopp""><strong>XML-Based Configuration</strong>: We discuss an older form of Spring configuration, still in use, that uses XML files to define dependencies, server-wide options, and more.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed93efc_l2-03-lesson-outline/l2-03-lesson-outline.png'],https://www.youtube.com/embed/q84URC4H6YM
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.2  The Spring Framework,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Spring Transformation</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows that Spring takes the component class files and dependency configuration from the developer and instantiates a system of Java objects with references to each other.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Of all the tools we\'ll be using in this course, Spring is the most important because it defines our entire style of application development. Spring is a framework for Inversion of Control, which means that to use it, we have to package our code into individual component classes, telling Spring which components need each other to function. Spring takes the component classes we define and the dependencies we define between them and instantiates a system of matching Java objects with references to each other. This frees us from having to write so-called ""glue code"" to instantiate, connect, and manage components manually, and allows us to instead focus on writing so-called business logic, or code that concerns itself exclusively on the conceptual model of the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Inversion of Control (IoC)</strong>: A design pattern in which the developer creates independent application components and uses a framework to connect them, rather than writing the integration code themselves</li><li class=""css-cvpopp""><strong>Business Logic</strong>: Code that relates exclusively to an application\'s conceptual model and featureset. Contrast with utility code like database access, HTTP request parsing, etc.</li><li class=""css-cvpopp""><strong>Persistent Components</strong>: Java Objects that Spring maintains over time; they\'re persistent because they\'re created and maintained for as long as the application needs them to be.</li><li class=""css-cvpopp""><strong>Dependency Injection</strong>: A mechanism by which IoC may be implemented. Components are configured with dependencies on other components, which are injected at runtime. Injection is quite literal - a component\'s dependencies are usually expressed as annotated fields on the component class, and Spring will populate those fields with the dependencies at runtime.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What benefits of Spring help enable structured software development?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Encourage development of single-purpose components that can be combined to implement business features.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Forcing developer to identify the order components should be instantiated.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Injecting resources into whichever classes use them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Matching dependency requests to resources by Java type, component name, or a configuration property.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Injecting values, strings, and numbers, but requiring complex objects to be created by the programmer.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed93f8f_l2-10-big-picture/l2-10-big-picture.png'],https://www.youtube.com/embed/nC57a-Gjm10
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.3  What is Spring,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/resisttheurge/udacity-jwdnd-c1-snippets/tree/master/src/main/java/com/udacity/jwdnd/c1/snippets/l2"">The code snippets for this lecture can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">When designing Spring applications, the most important principle to keep in mind is separation of concerns. What that really means is that for every problem your application has to solve has a home in a component class that is easy to find and flexible to use. By building your application out of small but focused components, you\'ll make the most of Spring\'s boilerplate-crushing power, and when it\'s time to add new features, you\'ll know exactly where to put them. On a larger team, this means greater coordination and less time spent trying to find and eliminate redundancies and conflicts.</p>\n<p class=""chakra-text css-o3oz8b"">But in order to allow your components to communicate effectively with one another, you\'ll need a system of data types to share between them. These are simple classes designed to store structured data, and little else. They\'re useful as conceptual representations of application data, like user profiles, or shipment invoice details, but made to be used and manipulated by the components of an application. A good rule of thumb to decide which is which is the <code class=""chakra-code css-1u83yg1"">new</code> keyword test. A component should never be manually instantiated with the new keyword - components are managed by Spring, which means we need to rely on dependency injection to get a component reference. Data types, on the other hand, are no more special than Java\'s collections, and we can manually instantiate them with the <code class=""chakra-code css-1u83yg1"">new</code> keyword whenever we\'d like. Of course, we can use Spring (and its related libraries) to instantiate them for us as well, and in the coming lessons we sometimes will.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms:</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Separation of Concerns</strong>: A code organization philosophy that emphasizes single-purpose components. In Java and Spring, this means keeping all methods related to a specific problem domain in the same class, for the sake of maintainability and reducing code reuse.</li><li class=""css-cvpopp""><strong>Data Types</strong>: Sometimes called POJOs (plain-old-java-objects), Data Types are classes in application designed purely to hold structured application data, like users, profiles, or anything else an application might manage. These objects are helpful for us to maintain a good conceptual model of an application, and are created and accessed frequently during execution.</li><li class=""css-cvpopp""><strong>Components</strong>: Components are persistent class instances managed by Spring in an application. They usually resemble libraries more than typical objects, with methods that must be called to perform specific actions. Components are only created when Spring is configured to create them, usually at server startup.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the code examples below. Which ones might <strong>not</strong> reflect the best practices of using Spring we’ve discussed so far?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public void updateUserName(String name){\n</span>   User user = new User();\n   user.setName(name);\n   UserService userService = new UserService();\n   userService.updateUser(user);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public interface IUserService {\n</span>   void updateUser(User user);\n   User findUser(String name);\n}\npublic interface IDeliveryService {\n   void scheduleDelivery(String address, LocalDate date);\n   LocalDate findNextDeliveryDate(String address);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public interface IUserService {\n</span>   void updateUser(User user);\n   User findUser(String name);\n   void scheduleDelivery(String address, LocalDate date);\n   LocalDate findNextDeliveryDate(String address);\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class User {\n</span>   private String name;\n   public User updateUser(){\n       userService.updateUser(this);\n       return this;\n   } / *rest of class omitted*/\n}```</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below is a list of scenarios. In some cases, you should add new Spring components, while in other cases you should use existing components. Select the scenarios in which you should add a new component.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your UserService currently can find users by name, but you want to be able to find them by birthday as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your application currently stores user data, but now you want to save and access shoe data as well.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You want to add a shoe size attribute to your User data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Your need to expose your UserService methods to a REST endpoint, which your application currently does not do.</p></div>']",[],https://www.youtube.com/embed/qJV8KRC9Xhc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.4  Spring Boot IoC Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Under the hood, Spring is just a Java application itself - and it responds to our configuration in a predictable way. When a Spring application starts, it scans your code base for specially-marked class files and configuration options. It uses that information to instantiate your application components as Java objects, and it stores them in a special data structure called the application context. This context is ultimately very similar to a <code class=""chakra-code css-1u83yg1"">Map</code> or a python dictionary, and it can be queried at runtime to find specific components when needed. This is a closed system, so components instantiated outside of Spring won\'t automatically be injected with dependencies like those instantiated by Spring. Mind the <code class=""chakra-code css-1u83yg1"">new</code> keyword!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How Spring Processes an IoC Configuration.</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows an example of how Spring processes an IoC configuration. The general steps are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">A bean without dependencies is initialized first and placed within the application context.</li><li class=""css-cvpopp"">A service is instantiated by Spring, and the first bean is retrieved from the app context to be injected as a dependency, after which Spring places the service in the application context.</li><li class=""css-cvpopp"">Finally, another bean is initialized by Spring, which retrieves the previous two components to be injected as dependencies, after which the new bean is placed in the app context, and the application is fully initialized.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Configuration Files</strong>: Project files that configure some part of Spring\'s operation. Some are embedded in Java classes, like we just discussed, and others are <code class=""chakra-code css-1u83yg1"">.properties</code>, <code class=""chakra-code css-1u83yg1"">.yaml</code>, and <code class=""chakra-code css-1u83yg1"">.xml</code> files that we\'ll discuss later this lesson. Some of them configure the IoC context, like the ones we just discussed, and others configure more abstract pieces of Spring\'s system.</li><li class=""css-cvpopp""><strong>Component Annotations</strong>: Component annotations are annotations that identify application components for Spring to manage. <code class=""chakra-code css-1u83yg1"">@Bean</code> and <code class=""chakra-code css-1u83yg1"">@Configuration</code> are examples from the most recent videos, and in the next section we\'ll discuss <code class=""chakra-code css-1u83yg1"">@Component</code> and <code class=""chakra-code css-1u83yg1"">@Service</code> as well.</li><li class=""css-cvpopp""><strong>Application Context</strong>: Spring\'s application context is just a giant data structure that holds all application component instances. It can be queried to gain access to a specified component at runtime, and it\'s what Spring uses to resolve dependencies.</li><li class=""css-cvpopp""><strong>Beans</strong>: ""Beans"" are Spring\'s name for generic application components, and include any value Spring has stored in the application context. A bean is always either an object or primitive value.</li><li class=""css-cvpopp""><strong>Closed System</strong>: Spring\'s application context is a closed system, which means that it manages all of the components stored within. It is not possible to instantiate a component manually and still link it fully with Spring - it will never be aware of the components inside of Spring\'s application context, and vice versa.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code></strong>: An annotation put on the main application class of a Spring Boot project. It serves as an alias of three other annotations, <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@ComponentScan</code></li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Configuration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@Configuration</code> is instantiated and managed by Spring as a component, but also as a bean factory. Any methods of the configuration class that are annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> are used by Spring to create new beans to add to the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Bean</code></strong>: A method annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> inside of a configuration class will be used by Spring to generate a bean of the method\'s return type. This means that the developer can manually configure beans to be included in the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code> tells Spring to try to automatically match beans to dependencies based primarily on type. This reduces the need for boilerplate code explicitly identifying individual beans as dependencies.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Primary</code></strong>: This annotation distinguishes the annotated bean method as the default dependency of its type. This is used to resolve conflicts that arise from having multiple bean definitions of the same type when auto configuration is enabled.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Qualifier</code></strong>: This annotation distinguishes the annotated bean method or dependency declaration as a qualified bean or dependency. Qualified beans are considered for unqualified dependencies, but only matching qualified beans are considered for qualified dependencies. You can read more about it <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-autowired-annotation-qualifiers"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about Spring’s IoC Configuration are true:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code> annotation is shorthand for three other annotations: <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@Bean</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Qualifier</code> annotation helps Spring figure out which bean to use if there are multiple options.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Configuration</code> annotation allows the current class to extend Spring’s ApplicationContext.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You must use the <code class=""chakra-code css-1u83yg1"">@Bean</code> annotation for each component Spring needs to initialize.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans"">Official Spring IoC Documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-annotation-config"">Official Spring Annotation-Based Configuration Documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed946f4_screen-shot-2020-06-04-at-12.08.59-pm/screen-shot-2020-06-04-at-12.08.59-pm.png'],https://www.youtube.com/embed/QjtzCdGnV9Y
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.5  Components and Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If we want to declare custom classes as Spring Components, the best way to do it is to make use of <code class=""chakra-code css-1u83yg1"">@ComponentScan</code>, an annotation that tells Spring to search your code base for classes annotated with <code class=""chakra-code css-1u83yg1"">@Component</code>. These classes will automatically be instantiated as Spring beans, so there\'s no need to define an <code class=""chakra-code css-1u83yg1"">@Bean</code>-annotated method if you already have <code class=""chakra-code css-1u83yg1"">@Component</code> on you classes. There are other variants of <code class=""chakra-code css-1u83yg1"">@Component</code> that identify specific roles for each component to play. We\'ll see some examples of these in the coming lectures, but if you want to learn more, check out the link below.</p>\n<p class=""chakra-text css-o3oz8b"">One important thing to keep in mind is that <code class=""chakra-code css-1u83yg1"">@ComponentScan</code> only marks the <em class=""chakra-text css-o3oz8b"">package</em> of the class it\'s annotating for scanning - any classes outside of that package or its subpackages will be excluded by Spring. Here are the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/context/annotation/ComponentScan.html"">official Spring docs for <code class=""chakra-code css-1u83yg1"">@ComponentScan</code><span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> as well as the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/#beans-stereotype-annotations"">official Spring docs explaining the how different <em class=""chakra-text css-o3oz8b"">stereotype</em> annotations like <code class=""chakra-code css-1u83yg1"">@Component</code>, <code class=""chakra-code css-1u83yg1"">@Service</code>, <code class=""chakra-code css-1u83yg1"">@Repository</code>, and others, function<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Onion Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the basic structure of Onion Architecture. External requests must first pass through a layer of controllers or request handlers whose only purpose is to handle these external requests. These controllers then use the next layer of the onion, the services, to process the actions or analysis triggered by the request. The services, in turn, use each other and the next layer, repositories and data access, to persist the results of the actions triggered by the request.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Onion Architecture</strong>: An architectural pattern in which an application is separated into nested layers. In order for a request to be processed by the application, it must first travel through an outer layer of external interfaces and controllers, then through a middle layer of services and business logic, and finally through a persistence layer of data access objects. The separation of these layers emphasizes clean separation of concerns.</li><li class=""css-cvpopp""><strong>Application Component</strong>: In Spring, this is any @Component-annotated class that is instantiated by Spring and placed in Spring\'s application context. Architecturally speaking, this is a logical unit of an application - a single-purpose library or object that solves a particular problem an application faces.</li><li class=""css-cvpopp""><strong>Service</strong>: In Spring, this is any <code class=""chakra-code css-1u83yg1"">@Service</code>-annotated class, handled identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated class. The difference between the two is semantics - a component is the most generic type of bean, and can be any kind of shared application structure. A service is specifically a collection of library methods that manage one aspect of an application\'s business logic. For example, a <code class=""chakra-code css-1u83yg1"">UserService</code> would expose high-level actions related to the users of an application, and an <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> would expose actions for registering and authenticating a user. Services represent the middle layer of an onion architecture, and should contain the bulk of an application\'s business logic.</li><li class=""css-cvpopp""><strong>Repository</strong>: In Spring, an <code class=""chakra-code css-1u83yg1"">@Repository</code>-annotated class is treated identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated one, but as with <code class=""chakra-code css-1u83yg1"">@Service</code>, the semantics are different. In an onion architecture, repositories are the inner layer - each repository should act like an interface to a specific set of stored or persistent data. For example, a <code class=""chakra-code css-1u83yg1"">UserRepository</code> would expose an interface capable of create/read/update/delete and query operations on the <code class=""chakra-code css-1u83yg1"">users</code> table of the database.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed94796_l2-29-components-and-services/l2-29-components-and-services.png'],https://www.youtube.com/embed/s9R8zH5M-eY
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.6  Components and Services Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about Spring Components are true:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Beans created in your <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code> class can\'t use beans found by <code class=""chakra-code css-1u83yg1"">@ComponentScan</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ComponentScan</code> only looks for Component classes in the same package as your <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code>, or its subpackages.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@Service</code>, <code class=""chakra-code css-1u83yg1"">@Controller</code>, and <code class=""chakra-code css-1u83yg1"">@Repository</code> are all types of <code class=""chakra-code css-1u83yg1"">@Component</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You can declare beans in their own class by using <code class=""chakra-code css-1u83yg1"">@Component</code> annotations, but you have to use the default constructor.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider a program that stores a list of Users and Shoes. We have the following components:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">UserService</code> - Provides methods to find and modify users, including setting the users’ current pair of shoes.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">ShoeService</code> - Provides methods to find and modify the inventory of shoes.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">UserController</code> - Provides REST endpoints for our webpage to request information about users, and set the user’s shoes.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Which statements are probably true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">UserService</code> beans have a reference to a <code class=""chakra-code css-1u83yg1"">ShoeService</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">UserController</code> has references to both the <code class=""chakra-code css-1u83yg1"">UserService</code> and <code class=""chakra-code css-1u83yg1"">ShoeService</code> beans.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">UserService</code> bean has a reference to the <code class=""chakra-code css-1u83yg1"">UserController</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">ShoeService</code> bean doesn’t have references to any of the other beans.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s an Explanation!</h3></div>']",[],https://www.youtube.com/embed/g2peW7Iq1Xw
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.7  Exercise: Components and Services,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.8  Solution: Components and Services,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are quite a few classes in this example, but only some of them need annotations. WE can figure out which ones by following the chain of dependencies - <code class=""chakra-code css-1u83yg1"">FoodController</code> references <code class=""chakra-code css-1u83yg1"">FoodService</code> which references <code class=""chakra-code css-1u83yg1"">FoodRepository</code>, which means all of them need some variation of <code class=""chakra-code css-1u83yg1"">@Component</code> on each. Yes, even <code class=""chakra-code css-1u83yg1"">FoodController</code> at the top of the chain - remember that in order for Spring fill dependencies, <em class=""chakra-text css-o3oz8b"">all</em> related components must be configured for IoC.</p>\n<p class=""chakra-text css-o3oz8b"">We also need to annotate our main application class with <code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code>. Remember that this is what configures Spring\'s component scanning and auto-configuration, so without this, the <code class=""chakra-code css-1u83yg1"">@Component</code> variants we used above wouldn\'t be seen by Spring.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Course1ExercisesApplication.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* This annotation will, among other things, enable component\n* scanning for our project\n*/\n@SpringBootApplication \npublic class Course1ExercisesApplication {\n\n  public static void main(String[] args) {\n     SpringApplication.run(Course1ExercisesApplication.class, args);\n  }\n\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodController.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Controller for receiving requests.\n* This class needs to be a Spring Component so that Spring can\n* automatically create instances of it to receive web requests. We use\n* the @Controller annotation variation of @Component for this purpose.\n*/\n\n@Controller\n@RequestMapping(""/food"")\npublic class FoodController {\n\n   private FoodService foodService;\n\n   public FoodController(FoodService foodService) {\n       this.foodService = foodService;\n   }\n\n   @GetMapping\n   public String getHomePage(FoodForm foodForm, Model model) {\n       foodService.addFood(foodForm.getFoodName(), foodForm.getCalories(), foodForm.getMealTime());\n       return ""foodAdded"";\n   }\n\n}\n</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Food Service that performs business logic operations regarding food\n* This class needs to be a component, because our Controller has a reference to\n* it that it doesn\'t create itself. Marking this as a @Service lets Spring know\n* to make instances of this bean available to other classes, though @Component would work as well.\n*/\n@Service\npublic class FoodService {\n   private FoodRepository foodRepository;\n\n   public FoodService(FoodRepository foodRepository) {\n       this.foodRepository = foodRepository;\n   }\n\n   public Boolean isFoodAvailableAtMealTime(String foodName, MealTime mealTime) {\n       return foodRepository.getFood(mealTime).stream()\n               .filter(food -&gt; food.getName().equals(foodName))\n               .findFirst()\n               .isPresent();\n   }\n\n   public void addFood(String foodName, Integer calories, MealTime mealTime) {\n       foodRepository.addFood(mealTime, new FoodData(foodName, calories));\n   }\n\n   public FoodRepository getFoodRepository() {\n       return foodRepository;\n   }\n\n   public void setFoodRepository(FoodRepository foodRepository) {\n       this.foodRepository = foodRepository;\n   }\n}</code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">FoodRepository.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>/**\n</span>* Pretend repository implementation\n* This class needs to be a Spring component as well, because our FoodService relies on it. We use\n* the @Repository annotation here to denote its function, but for this example @Component would work just\n* fine as well.\n*/\n@Repository\npublic class FoodRepository {\n   private Map&lt;MealTime, List&lt;FoodData&gt;&gt; foodDatabase = new EnumMap&lt;&gt;(MealTime.class);\n\n   public List&lt;FoodData&gt; getFood(MealTime mealTime) {\n       return foodDatabase.getOrDefault(mealTime, new ArrayList&lt;&gt;());\n   }\n\n   public void addFood(MealTime mealTime, FoodData food) {\n       foodDatabase.getOrDefault(mealTime, new ArrayList&lt;&gt;()).add(food);\n   }\n}</code></div></div></pre></div>']",[],https://www.youtube.com/embed/Xxtlhczz1w0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.9  Server-Wide Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l2-server-config-master"">The lecture code example can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Spring Boot does a lot to simplify the setup of a new Spring application, but sometimes, you need to change how it works. That\'s what the <code class=""chakra-code css-1u83yg1"">application.properties</code> file is for! You can find it in the <code class=""chakra-code css-1u83yg1"">src/main/resources</code> folder of a generated Spring Boot project, and it allows you to configure anything from the server\'s hostname and port to the size and colors of the Spring logo that appears in the console when starting an application.</p>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-boot/docs/current/reference/html/appendix-application-properties.html"">You can find reference documentation for all of the available config options here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Properties File</strong>: A file with the <code class=""chakra-code css-1u83yg1"">.properties</code> extension that consists of plain-text <code class=""chakra-code css-1u83yg1"">key=value</code> pairs separated by new lines. This format is often used by Java libraries and frameworks because it provides a simple way to specify named constants in a plain text file.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Spring properties are usually pretty descriptive. See if you can figure out what these properties are used for:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">logging.level.org.springframework</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sets the log level for the specified package</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.datasource.url</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the path to the primary data source</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">server.address</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the address for this server</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.http.encoding.charset</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the character encoding for the HTTP requests and responses</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">spring.gson.date-format</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Specifies the date format to be used when converting JSON</p></div>']",[],https://www.youtube.com/embed/bDj3gJpQ5Uw
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.10  Exercise: Server-Wide Configuration,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.11  Solution: Server-Wide Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Hopefully you were able to find all these without too much trouble! Most of the time, your properties will be driven by specific goals you need to accomplish. You’ll want to be prepared to look them up like you did for this exercise.</p>\n<p class=""chakra-text css-o3oz8b"">However, Spring’s intelligent defaults means that your application will often work fine with nothing in your properties file at all! That means we can usually rely on the defaults, and just be ready to look up the properties in the documentation when we need to.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.12  XML Configuration,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Given the following XML configuration for spring, which choice represents the equivalent java configuration?</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-xml"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">beans</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">com.udacity.example.IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;"">\n</span><span class=""token"" style=""color: navy;"">      </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">com.udacity.example.IndexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">constructor-arg</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">ref</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">bean</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">beans</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexApp </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexApp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Bean</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setIndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexService.java</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// ...</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// IndexApp.java</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Component</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span> indexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexApp</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>indexService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IndexService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/blob/master/udacity-jwdnd-c1-snippets-master/src/main/resources/l2/beans.xml"">You can find the <code class=""chakra-code css-1u83yg1"">beans.xml</code> sample code from the lecture here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Spring\'s annotation-based configuration is really convenient and allows us to see directly in our Java code how Spring is configured. This is a new API, though, and Spring\'s original configuration format was through XML.</p>\n<p class=""chakra-text css-o3oz8b"">We won\'t be using this older format in the course, but it\'s important to be aware of because it\'s still supported by Spring, and many older projects still use it. The key thing to remember is that Spring\'s annotation- and XML-based configuration systems are both equally capable of configuring Spring, so if you ever find yourself in a situation where you need one but only know how to do it in the other, you can always find a way to translate between them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Legacy</strong>: In a programming context, <em class=""chakra-text css-o3oz8b"">legacy</em> usually refers to older code that still functions or is expected to function, but is on the verge of being made obsolete by newer technologies. A legacy application is one that is no longer being actively built upon, and is instead in maintenance mode.</li><li class=""css-cvpopp""><strong>XML</strong>: e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage. This is a flexible data format that allows for extension, as the name suggests. Many applications and libraries use XML as a way to store structured application data out of memory, and it\'s also a popular data interchange format on the web.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.27.RELEASE/spring-framework-reference/htmlsingle/#beans-annotation-config"">Here are the official Spring docs for annotation-based configuration, which feature a discussion of XML vs. annotations and many examples of how the two relate to each other<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",[],https://www.youtube.com/embed/fWZ62Ik-rAk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.13  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Start with previous final review exercise.</li><li class=""css-cvpopp"">Create a bean with data.</li><li class=""css-cvpopp"">Create a service that uses that data.</li><li class=""css-cvpopp"">Test that the service receives the bean with logging.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a no-dependencies bean called <code class=""chakra-code css-1u83yg1"">message</code>. It should be a String like <code class=""chakra-code css-1u83yg1"">""Hello, Spring!""</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a class component called <code class=""chakra-code css-1u83yg1"">MessageService</code> that depends on the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add an <code class=""chakra-code css-1u83yg1"">uppercase</code> method to the <code class=""chakra-code css-1u83yg1"">MessageService</code> class that returns an uppercase version of the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">lowercase</code> method to the <code class=""chakra-code css-1u83yg1"">MessageService</code> class that returns an lowercase version of the <code class=""chakra-code css-1u83yg1"">message</code> bean.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a bean called <code class=""chakra-code css-1u83yg1"">uppercaseMessage</code> that depends on <code class=""chakra-code css-1u83yg1"">MessageService</code>. It should be a String that is the uppercase version of <code class=""chakra-code css-1u83yg1"">message</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a bean called <code class=""chakra-code css-1u83yg1"">lowercaseMessage</code> that depends on <code class=""chakra-code css-1u83yg1"">MessageService</code>. It should be a String that is the lowercase version of <code class=""chakra-code css-1u83yg1"">message</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add <code class=""chakra-code css-1u83yg1"">System.out.println</code> statements to log when each bean is created.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run the application and use the log messages to verify that the beans were initialized in the correct order: first <code class=""chakra-code css-1u83yg1"">message</code>, then <code class=""chakra-code css-1u83yg1"">MessageService</code>, then <code class=""chakra-code css-1u83yg1"">uppercaseMessage</code> and <code class=""chakra-code css-1u83yg1"">lowercaseMessage</code>.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.14  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l2-final-review-solution-master"">My solution code for this final review can be found here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Inversion of Control (IoC)</strong>: A design pattern in which the developer creates independent application components and uses a framework to connect them, rather than writing the integration code themselves</li><li class=""css-cvpopp""><strong>Business Logic</strong>: Code that relates exclusively to an application\'s conceptual model and featureset. Contrast with utility code like database access, HTTP request parsing, etc.</li><li class=""css-cvpopp""><strong>Persistent Components</strong>: Java Objects that Spring maintains over time; they\'re persistent because they\'re created and maintained for as long as the application needs them to be.</li><li class=""css-cvpopp""><strong>Dependency Injection</strong>: A mechanism by which IoC may be implemented. Components are configured with dependencies on other components, which are injected at runtime. Injection is quite literal - a component\'s dependencies are usually expressed as annotated fields on the component class, and Spring will populate those fields with the dependencies at runtime.</li><li class=""css-cvpopp""><strong>Separation of Concerns</strong>: A code organization philosophy that emphasizes single-purpose components. In Java and Spring, this means keeping all methods related to a specific problem domain in the same class, for the sake of maintainability and reducing code reuse.</li><li class=""css-cvpopp""><strong>Data Types</strong>: Sometimes called POJOs (plain-old-java-objects), Data Types are classes in application designed purely to hold structured application data, like users, profiles, or anything else an application might manage. These objects are helpful for us to maintain a good conceptual model of an application, and are created and accessed frequently during execution.</li><li class=""css-cvpopp""><strong>Components</strong>: Components are persistent class instances managed by Spring in an application. They usually resemble libraries more than typical objects, with methods that must be called to perform specific actions. Components are only created when Spring is configured to create them, usually at server startup.</li><li class=""css-cvpopp""><strong>Configuration Files</strong>: Project files that configure some part of Spring\'s operation. Some are embedded in Java classes, like we just discussed, and others are <code class=""chakra-code css-1u83yg1"">.properties</code>, <code class=""chakra-code css-1u83yg1"">.yaml</code>, and <code class=""chakra-code css-1u83yg1"">.xml</code> files that we\'ll discuss later this lesson. Some of them configure the IoC context, like the ones we just discussed, and others configure more abstract pieces of Spring\'s system.</li><li class=""css-cvpopp""><strong>Component Annotations</strong>: Component annotations are annotations that identify application components for Spring to manage. <code class=""chakra-code css-1u83yg1"">@Bean</code> and <code class=""chakra-code css-1u83yg1"">@Configuration</code> are examples from the most recent videos, and in the next section we\'ll discuss <code class=""chakra-code css-1u83yg1"">@Component</code> and <code class=""chakra-code css-1u83yg1"">@Service</code> as well.</li><li class=""css-cvpopp""><strong>Application Context</strong>: Spring\'s application context is just a giant data structure that holds all application component instances. It can be queried to gain access to a specified component at runtime, and it\'s what Spring uses to resolve dependencies.</li><li class=""css-cvpopp""><strong>Beans</strong>: ""Beans"" are Spring\'s name for generic application components, and include any value Spring has stored in the application context. A bean is always either an object or primitive value.</li><li class=""css-cvpopp""><strong>Closed System</strong>: Spring\'s application context is a closed system, which means that it manages all of the components stored within. It is not possible to instantiate a component manually and still link it fully with Spring - it will never be aware of the components inside of Spring\'s application context, and vice versa.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@SpringBootApplication</code></strong>: An annotation put on the main application class of a Spring Boot project. It serves as an alias of three other annotations, <code class=""chakra-code css-1u83yg1"">@Configuration</code>, <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code>, and <code class=""chakra-code css-1u83yg1"">@ComponentScan</code></li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Configuration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@Configuration</code> is instantiated and managed by Spring as a component, but also as a bean factory. Any methods of the configuration class that are annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> are used by Spring to create new beans to add to the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Bean</code></strong>: A method annotated with <code class=""chakra-code css-1u83yg1"">@Bean</code> inside of a configuration class will be used by Spring to generate a bean of the method\'s return type. This means that the developer can manually configure beans to be included in the application context.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code></strong>: A class annotated with <code class=""chakra-code css-1u83yg1"">@EnableAutoConfiguration</code> tells Spring to try to automatically match beans to dependencies based primarily on type. This reduces the need for boilerplate code explicitly identifying individual beans as dependencies.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Primary</code></strong>: This annotation distinguishes the annotated bean method as the default dependency of its type. This is used to resolve conflicts that arise from having multiple bean definitions of the same type when auto configuration is enabled.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">@Qualifier</code></strong>: This annotation distinguishes the annotated bean method or dependency declaration as a qualified bean or dependency. Qualified beans are considered for unqualified dependencies, but only matching qualified beans are considered for qualified dependencies. You can read more about it <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/spring-framework-reference/core.html#beans-autowired-annotation-qualifiers"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><strong>Onion Architecture</strong>: An architectural pattern in which an application is separated into nested layers. In order for a request to be processed by the application, it must first travel through an outer layer of external interfaces and controllers, then through a middle layer of services and business logic, and finally through a persistence layer of data access objects. The separation of these layers emphasizes clean separation of concerns.</li><li class=""css-cvpopp""><strong>Application Component</strong>: In Spring, this is any @Component-annotated class that is instantiated by Spring and placed in Spring\'s application context. Architecturally speaking, this is a logical unit of an application - a single-purpose library or object that solves a particular problem an application faces.</li><li class=""css-cvpopp""><strong>Service</strong>: In Spring, this is any <code class=""chakra-code css-1u83yg1"">@Service</code>-annotated class, handled identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated class. The difference between the two is semantics - a component is the most generic type of bean, and can be any kind of shared application structure. A service is specifically a collection of library methods that manage one aspect of an application\'s business logic. For example, a <code class=""chakra-code css-1u83yg1"">UserService</code> would expose high-level actions related to the users of an application, and an <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> would expose actions for registering and authenticating a user. Services represent the middle layer of an onion architecture, and should contain the bulk of an application\'s business logic.</li><li class=""css-cvpopp""><strong>Repository</strong>: In Spring, an <code class=""chakra-code css-1u83yg1"">@Repository</code>-annotated class is treated identically to an <code class=""chakra-code css-1u83yg1"">@Component</code>-annotated one, but as with <code class=""chakra-code css-1u83yg1"">@Service</code>, the semantics are different. In an onion architecture, repositories are the inner layer - each repository should act like an interface to a specific set of stored or persistent data. For example, a <code class=""chakra-code css-1u83yg1"">UserRepository</code> would expose an interface capable of create/read/update/delete and query operations on the <code class=""chakra-code css-1u83yg1"">users</code> table of the database.</li><li class=""css-cvpopp""><strong>Properties File</strong>: A file with the <code class=""chakra-code css-1u83yg1"">.properties</code> extension that consists of plain-text <code class=""chakra-code css-1u83yg1"">key=value</code> pairs separated by new lines. This format is often used by Java libraries and frameworks because it provides a simple way to specify named constants in a plain text file.</li><li class=""css-cvpopp""><strong>Legacy</strong>: In a programming context, <em class=""chakra-text css-o3oz8b"">legacy</em> usually refers to older code that still functions or is expected to function, but is on the verge of being made obsolete by newer technologies. A legacy application is one that is no longer being actively built upon, and is instead in maintenance mode.</li><li class=""css-cvpopp""><strong>XML</strong>: e<strong>X</strong>tensible <strong>M</strong>arkup <strong>L</strong>anguage. This is a flexible data format that allows for extension, as the name suggests. Many applications and libraries use XML as a way to store structured application data out of memory, and it\'s also a popular data interchange format on the web.</li></ul></div>']",[],https://www.youtube.com/embed/20KMZjwtIWg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 3: Spring Boot Basics for Web Development,3.15  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Congratulations, you\'ve made it through one of the toughest lessons in this course! Working with Spring requires an entirely new mentality when it comes to application design, and we had a lot of ground to cover in this lesson to lay the foundations for the rest of the course. Next lesson, we\'ll be adding some real functionality to our applications by integrating Spring MVC and Thymeleaf to render web pages for our clients.</p></div>']",[],https://www.youtube.com/embed/s-EyLno-X78
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.1  Spring MVC and Thymeleaf,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Spring MVC and Thymeleaf</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>MVC and You:</strong> We introduce the model-view-controller pattern and discuss how Spring MVC adapts it for use on the web.</li><li class=""css-cvpopp""><strong>HTML Templates and Thymeleaf:</strong> We look at how Thymeleaf\'s HTML templates work and how we can populate them with data using Spring controllers.</li><li class=""css-cvpopp""><strong>Connecting Controllers to Templates:</strong> We dive deeper into the relationship between controllers and templates to see how to bind data from a web form to a controller method.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed9745e_l3-03-lesson-outline/l3-03-lesson-outline.png'],https://www.youtube.com/embed/gA3tNZ05vQs
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.2  Developing Web Sites from the Back-End,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Relationship Between Spring MVC and the Client</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the relationship between Spring MVC and the client. Spring MVC uses HTML templates and application data to render a view for the client browser to display. The view exposes certain actions to the user, which when triggered are sent to Spring MVC, which processes the actions and renders new views for the client.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Interacting with a  simple web application</h3>\n<p class=""chakra-text css-o3oz8b"">In a web application, there are two components: the client that sends HTTP requests, and the server, which sends HTTP responses back. In the case of a web browser client, the responses the server sends need to be in the format of HTML, the document language of the web. The HTML that is sent to the client both defines the data that the user sees, as well as the actions a user can take - things like buttons, links, and input forms are all part of what the server is responsible for generating.</p>\n<p class=""chakra-text css-o3oz8b"">This process of generating an entire UI from HTML would be tedious if we had to do it by hand. Luckily, we don\'t have to - Thymeleaf is an HTML template engine that, when used with Spring MVC, can simplify things greatly.</p>\n<h3 class=""chakra-heading css-k57syw"">HTML templates</h3>\n<p class=""chakra-text css-o3oz8b""><em class=""chakra-text css-o3oz8b"">HTML templates are essentially just HTML files with special tags and attributes that can be combined with a data model by a template engine like Thymeleaf to generate fully functional HTML documents.</em>  Spring MVC provides a standard way to choose a template and supply the necessary data model when a request comes in, which allows for a truly dynamic user experience.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Data model defines how the application stores and retrieves (serialize and deserialize) the Java objects into/from the database. Data modeling starts with designing the database tables which are analogous to the Java classes (""model"" classes of the MVC).</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">You\'ll learn and practice HTML templates in the current lesson, and data model in the Data Persistence lesson.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">GET</code> Request:</strong> an HTTP request for data at a specific URL. This type of request cannot include any additional data.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">POST</code> Request:</strong> and HTTP request that usually represents ""posting"" new data to the server. This is a common catch-all request method used for many data-bearing requests to the server.</li><li class=""css-cvpopp""><strong>Dynamic:</strong> Something that is dynamic changes in response to external stimuli. In the case of HTML templates, dynamic sections of the template are ones that can be replaced or configured with data on-demand.</li><li class=""css-cvpopp""><strong>Static:</strong> Something that is static does not change. In the case of HTML templates, static sections of the template are the ones that cannot be changed and will be the same no matter what data is used with the template.</li><li class=""css-cvpopp""><strong>MVC:</strong> <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, a design pattern that emphasizes the separation of application components into those three categories or layers for more-structured user-facing application development.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Think about how templating allows us to populate reusable html structures with server data. What are some advantages to this approach over creating the html structures ourselves?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manually generating syntactically-correct HTML is hard work!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Templates allow us to programmatically construct HTML in our Spring <code class=""chakra-code css-1u83yg1"">@Controller</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Templates are more secure</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Many layout and visual elements are the same on multiple pages, so templating allows us to reuse them.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5ed974a8_l3-7-big-picture/l3-7-big-picture.png'],https://www.youtube.com/embed/qnkzSh2Bc9A
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,"4.3  Servers, Templates, and MVC","['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are three basic scenarios that comprise the majority of web-based user interaction flows.</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The first is when a user follows a link to our application from an external source, like a marketing email or google search. This kind of cold-call request means will always be a <code class=""chakra-code css-1u83yg1"">GET</code> request, and our application\'s responsibility is to choose a response template (appropriate for the request URL - you don\'t want to send the <code class=""chakra-code css-1u83yg1"">register.html</code> if the link the user clicked was for <code class=""chakra-code css-1u83yg1"">/shopping-cart</code>!) and populate it with relevant application data.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The second scenario is when a user navigates within our app, either by clicking a link or a button or performing some action we need to process on the server, like adding an item to their shopping cart. This case is very similar to the first, as it involves the server choosing a response template and populating it with data, but in this case, the action the user performs is completely up to us - since they\'re initiating the action from a web page we designed, only the actions we included in that design are available. We can use this to add additional data to requests at the template-level, for example by generating each ""add item to cart"" button to include the item\'s identifier in the request that is sent.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The final scenario is when the user submits completely custom data to our app using form input. This is again similar to the previous two, in that the exact shape of the form is something our template design determines, and that we still need to choose a template to send in response and the data we should use to populate this template. The main difference is that the request no longer includes ""safe"" data - when a user can enter any data that they\'d like, our application is responsible for vetting and validating that data, showing the user an error if something goes wrong.</p>\n</li></ol>\n<p class=""chakra-text css-o3oz8b"">These scenarios may seem simple, but they are the building blocks of web development. Regardless of the application, user interaction flows on the web are all built out of these basic building blocks.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following workflows best describes the interaction between the web server, the Spring controller, and the HTML template?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Spring controller receives an HTTP request and sends it to the web server. The web server selects a template and passes the template to the Spring controller to populate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives an HTTP request and uses it to select a template. It then sends the template to the Spring controller to populate.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives a template and uses it to call a method in the Spring controller. The Spring controller populates the corresponding model object and returns it to the web server, which populates the template with data from the model object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server receives an HTTP request and uses it to call a method in the Spring controller. The Spring controller populates a model object and returns a String with the view id. The template corresponding to the view id is populated with data from the model object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about servers, templates, and MVC are true?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The Controller connects the data to the template.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The web server defines the data and actions available to the user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User data can be either encoded into the request URL or sent in the body of the request message.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Controller methods return a model object that the web server uses to select a template.</p></div>']",[],https://www.youtube.com/embed/DJsfz_IaUzA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.4  MVC and You,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MVC is an acronym that stands for Model-View-Controller, and it\'s a common software pattern for user interface design. Traditionally, it divides the roles of components in an app into three layers:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">the <strong>Model</strong>, which is responsible for maintaining the state of an application,</li><li class=""css-cvpopp"">the <strong>View</strong>, which is responsible for displaying the UI to the user,</li><li class=""css-cvpopp"">and the <strong>Controller</strong>, which is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li></ul>\n<p class=""chakra-text css-o3oz8b"">MVC is an abstract pattern, though, and every library implements it differently. Spring MVC is built around the browser as a platform, and it organizes these roles like this:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>HTML templates</strong> are the views - each one represents a specific screen or screen component that the user is shown.</li><li class=""css-cvpopp""><strong>Spring beans</strong> are the controllers - specifically, Spring MVC gives an <code class=""chakra-code css-1u83yg1"">@Controller</code> annotation that we can use to register our beans as controllers. Think of Spring bean controllers as specialized application components that can define methods to handle specific user requests. Those methods are responsible for choosing the HTML template that is generated in response, as well as for populating the <code class=""chakra-code css-1u83yg1"">Model</code> object for that template.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">Model</code> objects</strong> are the models - every controller method can take an optional <code class=""chakra-code css-1u83yg1"">Model</code> argument, and by reading and changing the data inside of it, the controller can read user-submitted data and populate the template with the changes. Think of the Model class a simple data-transfer object: something that can store various bits of data with keys to look that data up, and that can be passed between the browser, the template engine, and the controller to facilitate the transfer of data between the user and the application.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Let\'s Get Coding!</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-mvc-and-you-1-master"">You can find the lecture sample code from the video above here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order to start using Spring MVC, we need two main elements: an HTML template to define the user interface, and a Spring MVC <code class=""chakra-code css-1u83yg1"">@Controller</code>-annotated bean to serve that template and populate it with data.</p>\n<p class=""chakra-text css-o3oz8b"">In our example so far, our ""template"" is actually just a static HTML page that displays a greeting. The main takeaway about templates so far is to remember to place them in the right folder - <code class=""chakra-code css-1u83yg1"">src/main/resources/templates</code> under the project root directory. When we choose a template in our controller, we do so by specifying the template name we want to load - our <code class=""chakra-code css-1u83yg1"">home.html</code> template in the example is simply referred to as <code class=""chakra-code css-1u83yg1"">""home""</code>. This will only work if your templates are in the right folder, so always double check!</p>\n<p class=""chakra-text css-o3oz8b"">To set up a basic controller to serve this template, we created a new class called <code class=""chakra-code css-1u83yg1"">HomeController</code> and annotated it with <code class=""chakra-code css-1u83yg1"">@Controller</code>. As you may remember from the last lesson, this registers the class as a Spring bean <em class=""chakra-text css-o3oz8b"">and</em> makes it eligible for request handling. That\'s why we can\'t just use <code class=""chakra-code css-1u83yg1"">@Component</code> - Spring MVC only looks at controllers, not all Spring beans.</p>\n<p class=""chakra-text css-o3oz8b"">In order to actually <em class=""chakra-text css-o3oz8b"">bind</em> the controller to a specific request URL - like <code class=""chakra-code css-1u83yg1"">/home</code> in our example - we have to define a method in the controller and annotate it with <code class=""chakra-code css-1u83yg1"">@RequestMapping</code>. We also have to return a String from this method - this is the name of the template we want to render. For this first step into web development, that\'s all we do - return the String <code class=""chakra-code css-1u83yg1"">""home""</code> to indicate that we want the <code class=""chakra-code css-1u83yg1"">home.html</code> template to be rendered when a user requests the <code class=""chakra-code css-1u83yg1"">/home</code> URL.</p>\n<h3 class=""chakra-heading css-k57syw"">Basic User Flow</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-mvc-and-you-2-master"">You can find the lecture sample code from the video above here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order to actually render dynamic data in a template, we again need to approach it from both the template and the controller.</p>\n<p class=""chakra-text css-o3oz8b"">In the template, we need to add Thymeleaf <em class=""chakra-text css-o3oz8b"">attributes</em> to our HTML. In our example so far, we added the <code class=""chakra-code css-1u83yg1"">th:text</code> attribute to the heading we want to be dynamic, like so:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1 th:text=""${welcomeMessage}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This attribute will cause Thymeleaf to replace the text inside the <code class=""chakra-code css-1u83yg1"">h1</code> tag (<code class=""chakra-code css-1u83yg1"">Hello, homepage!</code>) with a string generated by evaluating the expression in the <code class=""chakra-code css-1u83yg1"">th:text</code> attribute (<code class=""chakra-code css-1u83yg1"">${welcomeMessage}</code>). The syntax of this expression is fairly simple: the <code class=""chakra-code css-1u83yg1"">${}</code> indicates an expression to evaluate, and by using a <em class=""chakra-text css-o3oz8b"">name</em> like <code class=""chakra-code css-1u83yg1"">welcomeMessage</code> inside of it, we\'re telling Thymeleaf to look up a value in the model supplied for this template with the same name.</p>\n<p class=""chakra-text css-o3oz8b"">For that to work, though, we need to add a value named <code class=""chakra-code css-1u83yg1"">welcomeMessage</code> to the model - and we do that in the controller method like so:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    @RequestMapping(""/home"")\n</span>    public String getHomePage(Model model) {\n        model.addAttribute(""welcomeMessage"", ""Hi Hello"");\n        return ""home"";\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">First we need to add an argument to the controller method - the <code class=""chakra-code css-1u83yg1"">Model</code> object you see above. This is a special class that Spring MVC will send to Thymeleaf to render the template, and we can set various <em class=""chakra-text css-o3oz8b"">attributes</em> on it to add named values. As you can see, we\'re adding a value of <code class=""chakra-code css-1u83yg1"">""Hi Hello""</code> to the model with the name <code class=""chakra-code css-1u83yg1"">""welcomeMessage""</code> - which is exactly the name we\'re referencing in our template! Now when we render the template, the message <code class=""chakra-code css-1u83yg1"">Hi Hello</code> will appear on the web page instead of <code class=""chakra-code css-1u83yg1"">Hello, homepage!</code></p>\n<p class=""chakra-text css-o3oz8b"">Nice!</p>\n<p class=""chakra-text css-o3oz8b"">We can replace the hardcoded <code class=""chakra-code css-1u83yg1"">""Hi Hello""</code> string in our controller with any Java value or expression, and it will be set every time the controller method is called, which means every time a request comes in for <code class=""chakra-code css-1u83yg1"">/home</code>. That means we can set it dynamically, even based on the request that comes in. If we replace it with <code class=""chakra-code css-1u83yg1"">Instant.now().toString()</code>, we end up with a welcome message that shows the current time, and updates every time we reload the page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Spring MVC Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the Spring MVC\'s architecture. The browser represents the view, and requests from the browser are user actions. When Spring MVC processes a request, it creates a <code class=""chakra-code css-1u83yg1"">Model</code> object that represents the dynamic data associated with the view and passes it to a controller method that matches the request. The controller updates the model and chooses a template to render in response. Spring MVC passes the template and the updated model to Thymeleaf, which generates an updated view, which Spring sends in response to the browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>MVC</strong>: MVC is an acronym that stands for <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, and it\'s a common software pattern for user interface design</li><li class=""css-cvpopp""><strong>Model</strong>: in MVC, the Model is responsible for maintaining the state of an application,</li><li class=""css-cvpopp""><strong>View</strong>: in MVC, the View is responsible for displaying the UI to the user,</li><li class=""css-cvpopp""><strong>Controller</strong>: in MVC, the Controller is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li><li class=""css-cvpopp""><strong>Template</strong>: In software development, templates are used in many different contexts - in general, they are a way to define some often-repeated or reused text or code in a specific format, like HTML, along with <em class=""chakra-text css-o3oz8b"">code hooks</em> that indicate portions of the template that should be replaced dynamically when the template is rendered. In our context, we mostly use Thymeleaf\'s <em class=""chakra-text css-o3oz8b"">HTML templates</em>, which mostly look like plain HTML with a few extra Thymeleaf-specific attributes. These attributes are our <em class=""chakra-text css-o3oz8b"">code hooks</em>, and allow us to define what data Thymeleaf uses when generating the final HTML from our template.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/guides/gs/serving-web-content/"">Getting Started - Tutorial on Serving Web Content with Spring MVC<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - This tutorial will walk you through many new concepts that you will learn next in this course.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://uniandes-se4ma.gitlab.io/books/chapter8/mvc-mvvm-mv-mvwhat.html"">High-level Overview of Different MVC Variants<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5ed975e7_l3-21-mvc-and-you/l3-21-mvc-and-you.png'],https://www.youtube.com/embed/OImSIFbkFB8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.5  MVC and You Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following interactions. They’re all valid design patterns, but most of them are not used by Spring. Which one mostly closely describes Spring’s approach to MVC?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The model data is observable, and the subscribers receive updates of state change events.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All user actions and view updates are exchanged as HTTP request and response objects. The controller is responsible for choosing templates and populating the model data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">One component retrieves data and processes it, another component formats the visual presentation data, and the controller handles the flow between the first two components.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The controller is the master of both the model and the view. All interactions are defined by the controller, which updates the model and returns the view as necessary.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MVC and patterns like it can be found throughout the software world. Think about the scenarios below and check the ones that employ a Model-View-Controller design.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A browser communicates with a web server, which updates information in a database and returns a response to the browser.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">An operating system uses a file explorer to present the contents of its file system to users.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A mobile game provides a touch-screen interface to communicate with a game server that updates game state in memory on the server.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A phone system that allows users to submit credit card payments through an automated menu.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A waitperson taking a customer order and relaying it to the kitchen, where food is then prepared and brought back to the customer.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s the Solution!</h3></div>']",[],https://www.youtube.com/embed/mpTzYRpsmPE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.6  HTML Templates,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The nature of Spring MVC\'s data flow - the controller has to provide the data for the template it wants to render - means that often, when designing a new user-facing feature, it makes sense to start with the template.</p>\n<p class=""chakra-text css-o3oz8b"">Thymeleaf is the HTML <em class=""chakra-text css-o3oz8b"">template engine</em> we\'re using in this class, which means that it\'s a library that can take a template, a data model, and combine them to generate a final HTML document.</p>\n<p class=""chakra-text css-o3oz8b"">The way that Thymeleaf applies the data model to the template is based on the Thymeleaf <em class=""chakra-text css-o3oz8b"">attributes</em> we add to the template, like <code class=""chakra-code css-1u83yg1"">th:text</code> from the previous lecture on MVC. These attributes can have complex expressions as their values, which are processed by Thymeleaf in the context of the data model provided. In the next video, we\'ll look at some of the effects those attributes and expressions can achieve!</p>\n<h3 class=""chakra-heading css-k57syw"">More Greetings!</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-html-templates-master"">For the full lecture sample code from this lecture, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In addition to setting text values, we can use Thymeleaf attributes to perform basic <em class=""chakra-text css-o3oz8b"">control flow</em> in our templates. The main two types of control flow in templates are iteration and conditional rendering.</p>\n<p class=""chakra-text css-o3oz8b""><strong>Iteration</strong> in Thymeleaf templates works very similarly to an enhanced for-loop in Java. The main attribute used in template iteration is <code class=""chakra-code css-1u83yg1"">th:each</code>, and its use looks like this:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1  th:each=""msg : ${greetings}"" th:text=""${msg}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We can read the attribute <code class=""chakra-code css-1u83yg1"">th:each=""msg : ${greetings}""</code> as ""for each <code class=""chakra-code css-1u83yg1"">msg</code> in <code class=""chakra-code css-1u83yg1"">greetings</code>"", and it essentially means ""repeatedly render this element for each value in the <code class=""chakra-code css-1u83yg1"">greetings</code> collection, and name that element <code class=""chakra-code css-1u83yg1"">msg</code> for any expressions that need that name to have a value associated with it.</p>\n<p class=""chakra-text css-o3oz8b"">So in this example, the <code class=""chakra-code css-1u83yg1"">h1</code> tag will be repeatedly rendered, once for each element in <code class=""chakra-code css-1u83yg1"">greetings</code>, and the text rendered by <code class=""chakra-code css-1u83yg1"">th:text=""${msg}""</code> will be the current element of greetings being rendered. If <code class=""chakra-code css-1u83yg1"">greetings</code> contained the Strings ""Hi"" and ""Hello"", the final rendered html would be</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1&gt;Hi&lt;/h1&gt;\n</span>&lt;h1&gt;Hello&lt;/h1&gt;</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b""><strong>Conditional rendering</strong> in Thymeleaf usually looks like an if statement in Java, or occasionally a switch statement. The attribute we examined in the example was <code class=""chakra-code css-1u83yg1"">th:unless</code>, as in:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;h1  th:unless=""${msg.contains(\'goodbye\')}"" th:text=""${msg}""&gt;Hello, homepage!&lt;/h1&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In this case, if the <code class=""chakra-code css-1u83yg1"">msg</code> contains the String <code class=""chakra-code css-1u83yg1"">""goodbye""</code>, the <code class=""chakra-code css-1u83yg1"">h1</code> tag <strong>will not</strong> be rendered. This is particularly useful when choosing whether or not to render an error message, for example. If you need the opposite condition, in this case <em class=""chakra-text css-o3oz8b"">only</em> showing messages that contain <code class=""chakra-code css-1u83yg1"">""goodbye""</code>, you can simply replace the <code class=""chakra-code css-1u83yg1"">th:unless</code> with <code class=""chakra-code css-1u83yg1"">th:if</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>How Thymeleaf Renders a View</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows how Thymeleaf renders a view. In order to render a view, Thymeleaf must be given a template and a model to use. Thymeleaf scans through the template to find dynamic data expressions and resolves the variables in those expressions using the model. Some dynamic data expressions result in iterated or conditional rendering in addition to more typical text replacement.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>User Action</strong>: Broadly, a user action is simply some specific action a user can take, provided by the user interface they\'re interacting with. In the case of web applications, we usually think of user actions as clicks on a web page that often result in a HTTP request sent to the backend.</li><li class=""css-cvpopp""><strong>Prototype/Wireframe</strong> In the development process for a web application, it\'s common to first design the full HTML and CSS for all of the screens a user is expected to see. These pages have no actual functionality, and are usually called prototypes. Wireframes are an even earlier product of the design process, and usually are simple images that show what the prototypes should look like.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Reading</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#introducing-thymeleaf"">The official Thymeleaf tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, which explains the entire framework from first principles.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html#standard-expression-syntax"">The official Thymeleaf expression syntax tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - Read this section if all those <code class=""chakra-code css-1u83yg1"">${}</code>s aren\'t making much sense to you.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/4.3.10.RELEASE/spring-framework-reference/html/expressions.html"">The official Spring Expression Language docs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> - This will tell you how to perform various computations inside of the Thymeleaf expression brackets</li></ul></div>']",['https://video.udacity-data.com/topher/2020/July/5f247177_l3-32-html-templates-with-thymeleaf-1/l3-32-html-templates-with-thymeleaf-1.png'],https://www.youtube.com/embed/1PHTH1uRtlk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.7  HTML Templates Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider a simple HTML snippet:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome to the future!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">If your Model object has an attribute <code class=""chakra-code css-1u83yg1"">superGreatString</code>, what attribute can you add to your HTML to replace the text on the page with the value of <code class=""chakra-code css-1u83yg1"">superGreatString</code>?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:field=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:text=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:object=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">&lt;p th:string=”${superGreatString}”&gt;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the HTML snippets below. Some have valid Thymeleaf annotations, while some have invalid annotations. Select the valid snippets.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">tbody</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">tr</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">cat : ${cats}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">td</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.color}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">td</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">/&gt;</span><span>\n</span><span>\t</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">tr</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">tbody</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.name} + </span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);""> is </span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);""> + ${cat.color}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>```</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph &gt; 10}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Pretty fast</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">elseif</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat.maxSpeedMph &lt;= 10}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Not as fast</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">p</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/cat</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${cat}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Name your cat: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">newCatName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{name}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - For the second question, the correct options shown in the <em class=""chakra-text css-o3oz8b"">solution video</em> above have a missing/misplaced <em class=""chakra-text css-o3oz8b"">double-quote mark</em> ("" ""). However, the options displayed in the quiz are correct.</p>\n</blockquote></div>']",[],https://www.youtube.com/embed/1YD-dhb8sG0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.8  Exercise: HTML Templates,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.9  Solution: HTML Templates,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This example should be pretty simple. Here’s the <code class=""chakra-code css-1u83yg1"">&lt;body&gt;</code> text of our webpage:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome back!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can see we took the following steps:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Set <code class=""chakra-code css-1u83yg1"">th:action</code> to our /simplehome endpoint</li><li class=""css-cvpopp"">Set the method of our form to POST</li><li class=""css-cvpopp"">Used <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> to choose which message to display depending on the variable <code class=""chakra-code css-1u83yg1"">firstVisit.</code></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-html-templates-master"">Here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is the complete solution code with analogous variable names and corresponding values.</p></div>']",[],https://www.youtube.com/embed/2tkoFO11mSQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.10  Connecting Controllers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The final piece of the Spring MVC puzzle we need to build fully capable web apps is the ability to handle user-submitted data. As before, there are two main components to this, one on the template side, the other on the controller side.</p>\n<p class=""chakra-text css-o3oz8b"">On the template side, we need to define input fields for each piece of data we want to capture, and a <code class=""chakra-code css-1u83yg1"">&lt;form&gt;</code> element to group them. When the form is submitted, the data will be encoded in the HTTP request that is sent, and can be extracted on the Spring side.</p>\n<p class=""chakra-text css-o3oz8b"">On the Spring side of things, we need to define a POJO to hold the form data. We\'ll look at code details in the next video, but by defining this POJO we can pre-fill the form by setting its fields and adding it as a Model attribute when first rendering the template, and Spring can automatically extract the request data into that POJO when the form is submitted. Let\'s see how that works!</p>\n<h3 class=""chakra-heading css-k57syw"">User-Inputted Data</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-1-master"">For the full lecture sample code in the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at the HTML tags and Thymeleaf attribute we need to set up a form for the user to fill and submit to the server. Here\'s the template code saw:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-XHTML"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>&lt;form th:object=""${newMessage}"" th:action=""@{/home}"" action=""#"" method=""POST""&gt;\n</span>    &lt;input th:field=""*{text}"" type=""text""&gt;\n    &lt;input type=""submit""&gt;\n&lt;/form&gt;</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We use the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute to choose the POJO our form data should be added to, and the <code class=""chakra-code css-1u83yg1"">th:action</code>attribute to choose the URL to send the form submission HTTP request to. We use the special <code class=""chakra-code css-1u83yg1"">@{}</code> syntax in the latter to tell Thymeleaf to make sure the URL is always relative to the actual server address - this doesn\'t make a huge difference in our current project, but it\'s good practice when referring to URLs on our server in a Thymleaf template.</p>\n<p class=""chakra-text css-o3oz8b"">We also set <code class=""chakra-code css-1u83yg1"">method=""POST""</code> on the form to set the HTTP method of the resulting request. This is important! Remember that  <code class=""chakra-code css-1u83yg1"">GET</code> requests cannot contain any custom data - we need to use <code class=""chakra-code css-1u83yg1"">POST</code> for our form data to actually get sent!</p>\n<p class=""chakra-text css-o3oz8b"">In order to bind the individual form input data fields to the form-backing POJO\'s fields, we need to add the <code class=""chakra-code css-1u83yg1"">th:field</code> attribute. We also need to use another special Thymeleaf expression syntax - <code class=""chakra-code css-1u83yg1"">*{}</code>. This allows us to refer to fields on the form-backing POJO without using dot syntax - <code class=""chakra-code css-1u83yg1"">th:field=""*{text}""</code> in this example is equivalent to <code class=""chakra-code css-1u83yg1"">th:field=""${newMessage.text}""</code>.</p>\n<h3 class=""chakra-heading css-k57syw"">Persisting Data</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-2-master"">For the full lecture sample code from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at how to handle user-submitted data from the Spring controller side of things. Here are the finalized controller methods we saw:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    @GetMapping(""/home"")\n</span>    public String getHomePage(@ModelAttribute(""newMessage"") MessageForm newMessage, Model model) {\n        model.addAttribute(""greetings"", this.messageListService.getMessages());\n        return ""home"";\n    }\n\n    @PostMapping(""/home"")\n    public String addMessage(@ModelAttribute(""newMessage"") MessageForm messageForm, Model model) {\n        messageListService.addMessage(messageForm.getText());\n        model.addAttribute(""greetings"", messageListService.getMessages());\n        messageForm.setText("""");\n        return ""home"";\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The key elements to focus on are the new arguments to each of these methods - the <code class=""chakra-code css-1u83yg1"">MessageForm</code> class is a POJO specifically designed to hold the form data we defined in the previous video.</p>\n<p class=""chakra-text css-o3oz8b"">For the <code class=""chakra-code css-1u83yg1"">GET</code> request handling method, we declare the <code class=""chakra-code css-1u83yg1"">MessageForm</code> argument to ensure that the object exists and is added to the model by Spring automatically. This is necessary, because Thymeleaf needs an object with the name <code class=""chakra-code css-1u83yg1"">newMessage</code> to be present in the model to render properly, even if there isn\'t any data in the object yet.</p>\n<p class=""chakra-text css-o3oz8b"">For the <code class=""chakra-code css-1u83yg1"">POST</code> request handling method, we declare the <code class=""chakra-code css-1u83yg1"">MessageForm</code> argument to tell Spring that it should look for data that matches that in the body of the request we\'re handling. Spring will then automatically extract that data and put it in a <code class=""chakra-code css-1u83yg1"">MessageForm</code> object before calling our method, passing it to us so we can use the data as we see fit.</p>\n<p class=""chakra-text css-o3oz8b"">In both cases, we\'re annotating this argument with <code class=""chakra-code css-1u83yg1"">@ModelAttribute</code>. This allows us to specify that Spring should add the object to our <code class=""chakra-code css-1u83yg1"">Model</code> before asking Thymeleaf to render the template. That means we don\'t have to add it manually! Pretty handy.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Form-Backing Object</strong>: This is a term used by Spring MVC and Thymeleaf to mean an object that represents the data contained in a form. On the Spring side, this is usually an additional argument to the relevant Controller method, and on the Thymeleaf side, this is referred to in the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute on the form.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/3.2.x/spring-framework-reference/html/mvc.html"">Official Spring MVC docs with some discussion of form-backing objects<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thymeleaf.org/doc/tutorials/2.1/thymeleafspring.html#creating-a-form"">Official Thymeleaf docs for writing forms and integrating with Spring<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li></ul></div>']",[],https://www.youtube.com/embed/FftIxiuGpKo
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.11  Connecting Controllers Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match each of the functions below with the attribute or annotation that helps perform that function.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify form elements that capture user data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">th:field</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify objects that contain form data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@ModelAttribute</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify which endpoint to call on form submission</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">th:action</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Identify the path for a given controller</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@RequestMapping</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s a modified version of the code we looked at earlier in the lesson. We’ll update the body of the html to use a simple form that lets you send someone a high five:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/home</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${messageForm}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">GET</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Send a high five to someone: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">highFiveText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{text}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">msg : ${greetings}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg.contains(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Goodbye</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">)}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We’ll also use the following two methods in our controller to handle the page when it loads and when we submit the form. Assume a messageListService exists that will work just like it did in the video. It starts with no messages and can add new messages to keep a list of all the messages added so far.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Controller</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@RequestMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HomeController</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageListService</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HomeController</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageListService</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>messageListService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@GetMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">lowFive</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageForm</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Model</span><span> model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""low five.""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addAttribute</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""greetings""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessages</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@PostMapping</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">highFive</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">MessageForm</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Model</span><span> model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""high five, ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> messageForm</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""!""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       model</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addAttribute</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""greetings""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> messageListService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessages</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">What will happen when you first visit the page, and what will happen when you enter the name ""Terry"" and then click the button?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page, it will display ‘low five.’ When you click the button, it will only display ‘high five, Terry!’</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page it will display ‘low five.’ When you click the button, it will display ‘low five.’ and ‘high five, Terry!’</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page, it will display ‘low five.’ When you click the button, there will be an error.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When you first load the page it will display ‘low five.’ When you click the button, it will display ‘low five.’ and then it will display ‘low five.’ again below that.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Feeling Stuck? Here\'s the Solution!</h3></div>']",[],https://www.youtube.com/embed/hHftl3xElR0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.12  Exercise: Connecting Controllers,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.13  Solution: Connecting Controllers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s the <code class=""chakra-code css-1u83yg1"">&lt;body&gt;</code> text that completes this assignment:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/animal</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">object</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${messageForm}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Enter an Animal: </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">animalText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{animalName}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">for</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Enter an Adjective:</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">label</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">text</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">adjective</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">field</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">*{adjective}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${#lists.size(greetings) &gt; 5}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">each</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">msg : ${greetings}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">text</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${msg}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${#lists.size(greetings) &gt; 5}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>I think that\'s enough!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You can see we made a few revisions to the <code class=""chakra-code css-1u83yg1"">&lt;form&gt;</code> element:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">We added <code class=""chakra-code css-1u83yg1"">th:action</code> to set the target of the form submission.</li><li class=""css-cvpopp"">We used <code class=""chakra-code css-1u83yg1"">th:object</code> to bind the form to <code class=""chakra-code css-1u83yg1"">messageForm</code>.</li><li class=""css-cvpopp"">We added a method=”POST” attribute.</li></ul>\n<p class=""chakra-text css-o3oz8b"">We also added the <code class=""chakra-code css-1u83yg1"">th:field</code> attribute to our input to reference the <code class=""chakra-code css-1u83yg1"">animalName</code> and <code class=""chakra-code css-1u83yg1"">adjective</code> values on our <code class=""chakra-code css-1u83yg1"">messageForm</code>.</p>\n<p class=""chakra-text css-o3oz8b"">To display the list of greetings, we use <code class=""chakra-code css-1u83yg1"">th:each</code> and set the <code class=""chakra-code css-1u83yg1"">th:text</code> for each row to the <code class=""chakra-code css-1u83yg1"">msg</code> value.</p>\n<p class=""chakra-text css-o3oz8b"">Lastly, we use <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> to show or hide our two text elements. Note that they don’t have to be in any particular order. <code class=""chakra-code css-1u83yg1"">th:if</code> and <code class=""chakra-code css-1u83yg1"">th:unless</code> both can operate independently.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-connecting-controllers-2-master"">Here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> is the complete solution code with analogous variable names and corresponding values.</p></div>']",[],https://www.youtube.com/embed/SXZGcceGBeY
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.14  Special Inputs,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ve been asked to write a Spring MVC controller that will manage file uploads. Which of these options looks like a method signature for a controller method that is meant to receive a file upload request?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@RequestParam MultiPartFile file, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@ModelAttribute FileUploadForm fileUploadForm, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@GetMapping\n</span>public String uploadFile(@RequestParam File file, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PutMapping\n</span>public String uploadFile(@RequestParam InputStream fileStream, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@PostMapping\n</span>public String uploadFile(@ModelAttribute String filePath, Model model)</code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following statements. Check all that are false.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to upload large files to a Spring MVC application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to send browser cookie data to a Spring MVC application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to extract HTTP request headers in a Spring MVC controller method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There\'s no effective way to extract URL path segments as variables in a Spring MVC Controller method.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sometimes when we build web applications with Spring, we need to account for special request types and data formats. The key takeaway from this edge case is that usually, we can accomplish this by adding the correct argument to our controller method. In this example, we looked at <code class=""chakra-code css-1u83yg1"">MultiPartFile</code>, a special request data class provided by Spring to handle large file uploads. As with any special data type, simply by adding it as an argument to our controller method, Spring knows to treat the incoming request appropriately.</p>\n<p class=""chakra-text css-o3oz8b"">On the Thymeleaf side of things, we also learned how to set up a form for file upload using the <code class=""chakra-code css-1u83yg1"">enctype=""multipart/form-data""</code> attribute. This is another important takeaway - when we want to send special data types from the frontend to Spring, we need to find out how to configure the form properly.</p>\n<p class=""chakra-text css-o3oz8b"">This specific example will be relevant in the final project, but in general, be on the lookout for cases where you might need to handle special request data. Implementing it might take some research!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/multipart/MultipartFile.html"">Official Spring MultiPartFile Javadocs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://spring.io/guides/gs/uploading-files/"">Official Spring MVC file upload tutorial<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/HFnfUCP8eHA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.15  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to build our basic chat app! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Start with previous final review exercise</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Comment out the Spring Security dependencies in the POM file</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">chat.html</code> template that includes a form to submit new messages and display the chat message history</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a class, <code class=""chakra-code css-1u83yg1"">ChatForm</code>, to store the form data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a class, <code class=""chakra-code css-1u83yg1"">ChatMessage</code>, to represent a message with a username attached</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> class to store a list of those <code class=""chakra-code css-1u83yg1"">ChatMessage</code> objects</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> to add a method to add new messages to the stored list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">ChatController</code> class to serve the <code class=""chakra-code css-1u83yg1"">chat.html</code> template and handle the form submission, both at the <code class=""chakra-code css-1u83yg1"">/chat</code> URL.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Finally, test your app in the browser! Try to add messages from two browser windows with different user names. Do the messages show up for both users? Do the messages have the correct usernames attached?</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.16  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l3-final-review-solution-master"">You can find the full final review solution code here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">GET</code> Request:</strong> an HTTP request for data at a specific URL. This type of request cannot include any additional data.</li><li class=""css-cvpopp""><strong><code class=""chakra-code css-1u83yg1"">POST</code> Request:</strong> and HTTP request that usually represents ""posting"" new data to the server. This is a common catch-all request method used for many data-bearing requests to the server.</li><li class=""css-cvpopp""><strong>Dynamic:</strong> Something that is dynamic changes in response to external stimuli. In the case of HTML templates, dynamic sections of the template are ones that can be replaced or configured with data on-demand.</li><li class=""css-cvpopp""><strong>Static:</strong> Something that is static does not change. In the case of HTML templates, static sections of the template are the ones that cannot be changed and will be the same no matter what data is used with the template.</li><li class=""css-cvpopp""><strong>MVC:</strong> <strong>M</strong>odel-<strong>V</strong>iew-<strong>C</strong>ontroller, a design pattern that emphasizes the separation of application components into those three categories or layers for more-structured user-facing application development.</li><li class=""css-cvpopp""><strong>Model</strong>: in MVC, the Model is responsible for maintaining the state of an application,</li><li class=""css-cvpopp""><strong>View</strong>: in MVC, the View is responsible for displaying the UI to the user,</li><li class=""css-cvpopp""><strong>Controller</strong>: in MVC, the Controller is responsible for processing user actions (sent from the View) to update the Model, and for forwarding those updates back to the View</li><li class=""css-cvpopp""><strong>Template</strong>: In software development, templates are used in many different contexts - in general, they are a way to define some often-repeated or reused text or code in a specific format, like HTML, along with <em class=""chakra-text css-o3oz8b"">code hooks</em> that indicate portions of the template that should be replaced dynamically when the template is rendered. In our context, we mostly use Thymeleaf\'s <em class=""chakra-text css-o3oz8b"">HTML templates</em>, which mostly look like plain HTML with a few extra Thymeleaf-specific attributes. These attributes are our <em class=""chakra-text css-o3oz8b"">code hooks</em>, and allow us to define what data Thymeleaf uses when generating the final HTML from our template.</li><li class=""css-cvpopp""><strong>User Action</strong>: Broadly, a user action is simply some specific action a user can take, provided by the user interface they\'re interacting with. In the case of web applications, we usually think of user actions as clicks on a web page that often result in a HTTP request sent to the backend.</li><li class=""css-cvpopp""><strong>Prototype/Wireframe</strong> In the development process for a web application, it\'s common to first design the full HTML and CSS for all of the screens a user is expected to see. These pages have no actual functionality, and are usually called prototypes. Wireframes are an even earlier product of the design process, and usually are simple images that show what the prototypes should look like.</li><li class=""css-cvpopp""><strong>Form-Backing Object</strong>: This is a term used by Spring MVC and Thymeleaf to mean an object that represents the data contained in a form. On the Spring side, this is usually an additional argument to the relevant Controller method, and on the Thymeleaf side, this is referred to in the <code class=""chakra-code css-1u83yg1"">th:object</code> attribute on the form.</li></ul></div>']",[],https://www.youtube.com/embed/YYRUBJ9Ek80
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 4: Spring MVC and Thymeleaf,4.17  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Wow, good job making it this far! You\'ve taken your first visible step into the world of Java web development by learning how Spring MVC and Thymeleaf work. You should have all the tools you need to start developing the user interface for an application. Next lesson, we\'ll look at how we can make that application feel more permanent and robust by introducing data persistence and security - see you there!</p></div>']",[],https://www.youtube.com/embed/UMJnQ0m7eZg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.1  Data Persistence & Security,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lesson Outline</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>ORM is the Norm:</strong> We introduce ORM, or object-relational-mapping, a software pattern that leverages the similarities between Java classes and SQL tables to eliminate boilerplate in data access code.</li><li class=""css-cvpopp""><strong>MyBatis Mappers:</strong> We introduce MyBatis, a dead-simple ORM tool for Java that integrates well with Spring. We discuss the ""Mapper"" classes MyBatis wants us to design to access the database.</li><li class=""css-cvpopp""><strong>Practical Example - User Credentials and Authentication:</strong> As a motivating example for using ORM, we discuss how to implement basic login security with a User table, MyBatis, and Spring Security. We walk through a lengthy sample project that implements the entirety of this motivating example.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda98b5_l4-03-lesson-outline-1/l4-03-lesson-outline-1.png'],https://www.youtube.com/embed/RwSu3hThoKE
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.2  ORM and Security,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Growing Layers of Our Application</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the growing layers of our application. By adding MyBatis, we now have a translation from the Java and Spring world to the world of databases and SQL.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Why a database is required?</h3>\n<p class=""chakra-text css-o3oz8b"">Adding a database to our application is a way to externalize data persistence problems. When storing data in memory at runtime, we struggle to deal with:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Storage Space</li><li class=""css-cvpopp"">Concurrency</li><li class=""css-cvpopp"">Persistence of Data</li></ul>\n<p class=""chakra-text css-o3oz8b"">Using a database allows us to isolate these concerns from the rest of our application, so we can focus on the business logic of our application.</p>\n<h3 class=""chakra-heading css-k57syw"">How to interact with a database?</h3>\n<p class=""chakra-text css-o3oz8b"">There are many ways to manage the communication between an application and a database. For this course, we\'ll be using the library <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/index.html"">MyBatis<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> <em class=""chakra-text css-o3oz8b"">to transform Java objects to SQL query parameters and to transform SQL query results into Java objects.</em></p>\n<p class=""chakra-text css-o3oz8b"">We\'ll create MyBatis Mappers as Spring beans, so we can inject them into any other beans that need them. For example, if we think about an online-shopping example, we might have a UserMapper that manages credentials and profile information and a CartMapper that manages the contents of an individual user\'s cart. We can inject the UserMapper into a Checkout Service that also receives the CartMapper to apply the charges in a User\'s cart to that User\'s stored payment information.</p>\n<p class=""chakra-text css-o3oz8b"">Later in this lesson, we\'ll combine our MyBatis mappers with Spring Security to authenticate each user\'s session automatically. To continue our earlier example, this means we could inject the UserMapper in some kind of Authentication Service to check client credentials on login.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements describe benefits of using Object Relational Mapping (ORM) to save persistent data?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It’s faster than using JDBC.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It prevents us from having to write queries that reference every field in our object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It allows us to more easily work with our persistent data as Java objects.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It can handle multiple queries at once.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Additional Reading</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Briefly read the research paper titled <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.457.1205&amp;rep=rep1&amp;type=pdf"">Object/relational mapping 2008: hibernate and the entity data model<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> by Elizabeth O\'Neil for a better insight into the ORM.</li><li class=""css-cvpopp"">If you are not familiar with JDBC, refer to this official <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/jdbc/overview/index.html"">JDBC Introduction<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, and have a quick look at the underlying architecture. Though, we will not use the JDBC directly. MyBatis will automatically generate JDBC requests. You will learn and implement MyBatis shortly.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda82e7_l4-07-big-picture/l4-07-big-picture.png'],https://www.youtube.com/embed/dk0nqMNfyes
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.3  ORM and Security Contd,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">What Data Should be Stored in a Database?</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Data shared across multiple user sessions, like a product inventory</li><li class=""css-cvpopp"">Persistent data that should remain accessible after being logged out, like user profile or shopping cart</li></ul>\n<h3 class=""chakra-heading css-k57syw"">How Should Data be Structured?</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Intuitively. Most data can be stored in a similar format to the data objects that represent it in Java, with attributes matching column names.</li><li class=""css-cvpopp"">Differing. Some data must be stored differently for security reasons, such as encrypted passwords. Other data may require a different format for efficient storage, such as large files.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Thinking about Security</h3>\n<p class=""chakra-text css-o3oz8b"">The main question to ask is: <em class=""chakra-text css-o3oz8b"">“What pages can a user access?”</em></p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">User-Specific Data</li><li class=""css-cvpopp"">Generally Accessible (Unsecured) Data</li><li class=""css-cvpopp"">May Vary by Domain</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following portions of a webpage should require a user to be logged in to view?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Product Catalog</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Full Inventory</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Specific User Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A Generic Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Company Contact Info</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Some data belongs in the database, but if we tried to put everything there our app would be slow and our database would be huge! Imagine you’re making a web page for an online retail store. Which of the following things belong in the database?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User Profile</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">List of Our Products</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Product Search Results</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Shopping Cart</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Pictures of Our Products</p></div>']",[],https://www.youtube.com/embed/w3JAmWpBmRM
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.4  ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The first step in using ORM is to define the data model. Consider the relationship between the following tables:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">user</code> - A table containing the user ID, username, and password for each user.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">user_cart</code> - We are assuming, any user can have one cart at max. The cart would have multiple items (inventory). This table stores the user ID, inventory ID, and the quantity of inventory the user wants to purchase. In this table, the user ID, and inventory ID are the foreign keys respectively. Together, the combination of the user ID and inventory ID can act as a primary key.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">inventory</code> - It stores the inventory ID, name, and unit price of each inventory.</li></ul>\n<p class=""chakra-text css-o3oz8b"">We can represent their relationship in SQL with this image below.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Relationship Between SQL Tables</strong> - Image showing the relationship between the <code class=""chakra-code css-1u83yg1"">user</code>, <code class=""chakra-code css-1u83yg1"">user_cart</code>, and <code class=""chakra-code css-1u83yg1"">inventory</code> tables in SQL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A primary feature of ORM is that this type of relationship should have a natural mapping to Java classes. We can represent this same data in Java using a simple class diagram.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Class Diagram Corresponding to SQL Tables</strong> - The class diagram shows that the columns of the SQL diagram becomes fields of the Java objects <code class=""chakra-code css-1u83yg1"">User</code>, <code class=""chakra-code css-1u83yg1"">CartItem</code>, and <code class=""chakra-code css-1u83yg1"">InventoryItem</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The data types of these class attributes correspond to the data types of the SQL columns. Some Java types can be mapped to many different SQL types, and some SQL types can be mapped to multiple Java types, but in this case the type mappings are obvious. For a full list of the MyBatis type mapping, consult the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/configuration.html#typeHandlers"">MyBatis 3 TypeHandlers list<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Once you have defined your data types, MyBatis can automatically map Java objects to SQL statements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>ORM Process Visualization</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows the ORM Process Visualization, displaying how <code class=""chakra-code css-1u83yg1"">createUser(user)</code> is converted into SQL that inserts a row in a table, and <code class=""chakra-code css-1u83yg1"">getUserByName(name)</code> is converted into SQL that returns a result which becomes a Java object.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>ORM</strong>: Object-Relational Mapping. A general term describing a set of technology that can be used to automatically convert data between database representation and application representation.</li><li class=""css-cvpopp""><strong>Mapping</strong>: Drawing a relationship between a field in a Java class and a column in a SQL table.</li><li class=""css-cvpopp""><strong>One to One</strong>: A relationship between two objects in which one entity is on each side of the relationship.</li><li class=""css-cvpopp""><strong>Many to Many</strong>: A relationship between two objects in which multiple copies of each entity can be related to multiple copies of the other entity.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the following list of Java variables. To which types of columns could they correspond?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">String username;</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">VARCHAR</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Integer numberOfCats</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">INTEGER</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">LocalDate birthDate</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DATE</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Double priceOfSalmon</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">DECIMAL</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">Boolean passedTheQuiz</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">BOOL</p></div>']","['https://video.udacity-data.com/topher/2020/June/5eda83d2_l4-shopping-cart-erd-/l4-shopping-cart-erd-.png', 'https://video.udacity-data.com/topher/2020/October/5f9983b1_l4-shopping-cart-class-diagram/l4-shopping-cart-class-diagram.png', 'https://video.udacity-data.com/topher/2020/October/5f998407_l4-18-orm-is-the-norm-summary/l4-18-orm-is-the-norm-summary.png']",https://www.youtube.com/embed/p_Oe8ehn2Co
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.5  Exercise: ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Taco Delivery Database Diagram</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5eda8633_screen-shot-2020-06-05-at-10.51.08-am/screen-shot-2020-06-05-at-10.51.08-am.png'],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.6  Solution: ORM is the Norm,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - At timestamp 1:02 in the video above, when the instructor says ""Big Double"", he intends to say ""BigDecimal"".</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You should have created four classes for this exercise: <code class=""chakra-code css-1u83yg1"">Customer</code>, <code class=""chakra-code css-1u83yg1"">Order</code>, <code class=""chakra-code css-1u83yg1"">TacoOrder</code>, and <code class=""chakra-code css-1u83yg1"">Delivery</code>. These class files should live in a new <code class=""chakra-code css-1u83yg1"">data</code> folder in the <code class=""chakra-code css-1u83yg1"">course1</code> folder. The variables in each class should correspond to the variables in the database tables. Here are some sample implementations:</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Customer.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Customer</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> userName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>  \n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Pro Tip</strong> - It would be better if the <code class=""chakra-code css-1u83yg1"">password</code> field for the Customer class is <code class=""chakra-code css-1u83yg1"">char[ ]</code> array instead of a <code class=""chakra-code css-1u83yg1"">String</code>. As a developer, you would want to encrypt each character so that you wouldn\'t store the actual password anywhere in the system. A String is immutable by nature, and hence you cannot change/convert the characters of a String.</p>\n</blockquote>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Order.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Order</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> customerId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">TacoOrder.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> tacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// this will work here, but you should often use BigDouble for prices </span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// if you plan to do any math with them</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Double</span><span> tacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> count</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Pro Tip</strong> - The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/8/docs/api/java/math/BigDecimal.html"">java.math.BigDecimal<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> data type is better than any of the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html"">primitive data types<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>, including Double, for precise values, such as currency or <code class=""chakra-code css-1u83yg1"">tacoPrice</code>.</p>\n</blockquote>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">Delivery.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// there are a few types you can use for this. </span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// java.sql.Timestamp contains both date and time</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Timestamp</span><span> time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In our example above, we have a single item for <code class=""chakra-code css-1u83yg1"">TacoOrder</code> which encapsulates both an order id and also the data about the taco we’re ordering, including its name and price. What if we wanted to store our taco descriptions in another table and reference them in our <code class=""chakra-code css-1u83yg1"">TacoOrder</code> indirectly? What would the new structure of <code class=""chakra-code css-1u83yg1"">TacoOrder</code> be, and what foreign key(s) would you use to make this work?</p></div>']",[],https://www.youtube.com/embed/gjHZVhrRgnA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.7  MyBatis Mappers,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-snippets-master/src/main/java/com/udacity/jwdnd/c1/snippets/l4"">The lecture sample code for the above and next videos can be found here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">MyBatis overview</h3>\n<p class=""chakra-text css-o3oz8b"">MyBatis provides a shallow ORM layer over JDBC (Java Database Connectivity). That means it helps map your Java objects to queries that save and retrieve data using JDBC.</p>\n<p class=""chakra-text css-o3oz8b"">MyBatis is mostly used through interface definitions. MyBatis automatically generates classes that implement the interface and makes them available as Spring beans.  This is an example interface that defines a MyBatis Mapper.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Select</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""SELECT * FROM USERS WHERE username = #{username}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This code above uses <code class=""chakra-code css-1u83yg1"">#{username}</code> to identify the username parameter. It\'s like Thymeleaf parameters, but for SQL!</p>\n<p class=""chakra-text css-o3oz8b"">For more information on the template syntax MyBatis uses for SQL, check out <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/sqlmap-xml.html#Parameters"">the official documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. There are additional annotations for <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> as well. See the further research section below the next video for more info on ways to configure MyBatis.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">@Insert</code> and <code class=""chakra-code css-1u83yg1"">@Options</code> annotation</h3>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Insert</code> annotation automatically references attributes on the user object. Note username, firstName, lastName are all referenced directly here, because they are attributes of the user object.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO USERS (username, salt, password, firstname, lastname) ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""VALUES(#{username}, #{salt}, #{password}, #{firstName}, #{lastName})""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Options</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>useGeneratedKeys </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> keyProperty </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""userId""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This example also demonstrates the <code class=""chakra-code css-1u83yg1"">@Options</code> annotation. <code class=""chakra-code css-1u83yg1"">@Insert</code> normally returns an integer that is the count of rows affected. By using the <code class=""chakra-code css-1u83yg1"">@Options</code> annotation, we\'re telling MyBatis that we want to automatically generate a new key and put it in userId. Now the method will return the new userId once the row has been inserted.</p>\n<p class=""chakra-text css-o3oz8b"">All we have to do to use these methods is inject beans for this interface into our services and MyBatis will automatically create the code for the JDBC requests!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>MyBatis Mappers Lie at the Center of Our Onion Architecture</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows that MyBatis Mappers lie at the center of our onion architecture. Remember, that means that the only beans that should have dependencies on them are in the next layer up, services.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>@Select, @Insert, @Update, @Delete</strong>: Annotations representing SQL statements to be executed. Each annotation takes a string for a SQL statement of the corresponding type. For example, a <code class=""chakra-code css-1u83yg1"">@Select</code> annotation takes a string for a SQL <code class=""chakra-code css-1u83yg1"">SELECT</code> statement.</li><li class=""css-cvpopp""><strong>@Options</strong>: Annotation providing access to switches and configuration options for JDBC statements.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">For a full list of the available MyBatis annotations and some example usage, see the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://mybatis.org/mybatis-3/java-api.html"">MyBatis Java API documentation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</li><li class=""css-cvpopp"">For an informal overview of result mapping with MyBatis annotations, see <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://medium.com/@hsvdahiya/mybatis-annotations-result-mapping-spring-79944ff74b84"">this Medium article<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5eda8840_l4-29-mybatis-mappers/l4-29-mybatis-mappers.png'],https://www.youtube.com/embed/VE6Iub-0fOI
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.8  MyBatis Mappers Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following statements about MyBatis are correct?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">MyBatis generates your Bean from an interface alone.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">To add a new user to the database, you should use the <code class=""chakra-code css-1u83yg1"">@Select</code> annotation.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The variables in your MyBatis queries can reference either objects OR object attributes in the method parameters.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Methods with the <code class=""chakra-code css-1u83yg1"">@Insert</code> annotation return the id of the newly created row.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">We want to add a new TacoOrder to our database. Here’s the TacoOrder class:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> tacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Double</span><span> tacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> count</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span>getters and setters not shown</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">*</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">/</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Which of the following examples would perform our insert?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (#{tacoOrder)""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacoOrder.orderId, tacoOrder.tacoName, ""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacoOrder.tacoPrice, tacoOrder.count""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"")""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO TacoOrder (orderId, tacoName, tacoPrice, count)""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">"" VALUES (#{orderId}, #{tacoName}, #{tacoPrice}, #{count})""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.9  Exercise: MyBatis Mappers,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.10  Solution: MyBatis Mappers,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Explanation</h3>\n<p class=""chakra-text css-o3oz8b"">We declared three new methods in our interface. In this solution, they’re named <code class=""chakra-code css-1u83yg1"">findDelivery()</code>, <code class=""chakra-code css-1u83yg1"">insert()</code>, and <code class=""chakra-code css-1u83yg1"">delete()</code>, but you can name them as you like.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Mapper</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">interface</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Select</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""SELECT * FROM Delivery WHERE id = #{id}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""INSERT INTO Delivery (orderId, time) VALUES(#{orderId}, #{time})""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Options</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>useGeneratedKeys </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> keyProperty </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""id""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Delete</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""DELETE FROM Delivery WHERE id = #{id}""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">delete</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The code shown above has the following annotations:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The first annotation is a simple <code class=""chakra-code css-1u83yg1"">@Select</code> like we saw earlier in the lesson.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The second annotation <code class=""chakra-code css-1u83yg1"">@Insert</code> is pretty similar to the earlier example as well. It uses<code class=""chakra-code css-1u83yg1"">INSERT</code> command to create a new row in the Delivery table.\nNote that it only needs to provide the order ID and time values, because the ID itself is generated.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">@Options</code> annotation indicates to generate the key for the <code class=""chakra-code css-1u83yg1"">id</code> property and return it from the method. Also, note that our <code class=""chakra-code css-1u83yg1"">VALUES</code> portion of the query just provides order ID and time directly. MyBatis can figure out that they are attributes of our <code class=""chakra-code css-1u83yg1"">Delivery</code> object.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Lastly, <code class=""chakra-code css-1u83yg1"">@Delete</code> is very similar to the <code class=""chakra-code css-1u83yg1"">@Select</code>, but make sure you use the right annotation for it!</p>\n</li></ol></div>']",[],https://www.youtube.com/embed/mF50Rvgl6eQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.11  User Authentication,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Authentication in a web application</h3></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">User support is a common feature in web applications, which means that a user can register an account and use credentials to login to the application in the future.</p>\n<p class=""chakra-text css-o3oz8b"">It\'s important to design databases with the assumption that they will someday be breached, and so we cannot store passwords or other secret credentials in plain text. Two approaches to storing passwords are:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Encryption</strong>: Modifying data before storing it, with the intention of using another algorithm to return the data to its original form once it needs to be used.</li><li class=""css-cvpopp""><strong>Hashing</strong>: Modifying data before storing it with the intention of never returning it to its original form. The modified data will be compared to other modified data only.</li></ul>\n<p class=""chakra-text css-o3oz8b"">Hashing and Encryption should occur in a service dedicated to that purpose, rather than on the front end or in the controller. Hashing sometimes makes use of another technique, Salting. For a more in-depth discussion of salting and hashing passwords, see the further research section below the videos for this section.</p>\n<h3 class=""chakra-heading css-k57syw"">The flow of data</h3>\n<p class=""chakra-text css-o3oz8b"">Remember the separation of concerns and our onion architecture! <em class=""chakra-text css-o3oz8b"">The idea is that all user flows originate externally, travel through a controller, then through one or more services, finally through a data access bean to the database, and then all the way back up the chain.</em>  Structuring applications this way makes it easy to follow dependencies and separate concerns, so that\'s how we\'re going to build applications from now on.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Method in <code class=""chakra-code css-1u83yg1"">UserService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">createUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span> random </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecureRandom</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> salt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(2, 124, 124);"">16</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    random</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">nextBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedSalt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Base64</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encodeToString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> hashedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUsername</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> hashedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getFirstName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getLastName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The hashing service itself has a single method that takes some data and salt and creates a string representing the hashed value.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Salt</strong>: random data that is combined with the input string when hashing so that the resultant hashed values are unique for each row. This means that two users with the same password would not have the same hash in the database.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Method in <code class=""chakra-code css-1u83yg1"">HashService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> data</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">byte</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> hashedValue </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">KeySpec</span><span> spec </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">PBEKeySpec</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>data</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toCharArray</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> salt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getBytes</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">128</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">try</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecretKeyFactory</span><span> factory </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecretKeyFactory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getInstance</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""PBKDF2WithHmacSHA1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        hashedValue </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> factory</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">generateSecret</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>spec</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoded</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">catch</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InvalidKeySpecException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">|</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">NoSuchAlgorithmException</span><span> e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        logger</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">error</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>e</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getMessage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Base64</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getEncoder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">encodeToString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>hashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, we have no way to retrieve their original password, but we can re-hash their user input and see if it matches the hashed value in our database. Below is an example <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> class that implements a Spring interface, the <code class=""chakra-code css-1u83yg1"">AuthenticationProvider</code>. This allows Spring to integrate our provider with many different authentication schemes, but we can see in our <code class=""chakra-code css-1u83yg1"">supports</code> method that we specify that we only support UsernamePasswordAuthentication.</p>\n<p class=""chakra-text css-o3oz8b"">The <code class=""chakra-code css-1u83yg1"">authenticate()</code> method takes an Authentication object from spring and returns an authentication token if the user\'s credentials are correct.</p>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">AuthenticationService.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">implements</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationProvider</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashService</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UserMapper</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HashService</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>userMapper </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>hashService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticate</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Authentication</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> username </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> password </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getCredentials</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toString</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">User</span><span> user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> userMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getUser</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">!=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> encodedSalt </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> hashedPassword </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> hashService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getHashedValue</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> encodedSalt</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>user</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">equals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>hashedPassword</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>username</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> password</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ArrayList</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">null</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">boolean</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">supports</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Class</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">?</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> authentication</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">equals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">UsernamePasswordAuthenticationToken</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l4-spring-security-basics-master"">For the full lecture sample code from the past two videos, check here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In order for Spring to actually use our <code class=""chakra-code css-1u83yg1"">AuthenticationService</code>, we need to extend our Web Security configuration. We do that with an adapter for the <code class=""chakra-code css-1u83yg1"">WebSecurityConfigurer</code>. This example overrides two configure methods:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>configure(AuthenticationManagerBuilder auth)</strong>: used to tell Spring to use our <code class=""chakra-code css-1u83yg1"">AuthenticationService</code> to check user logins</li><li class=""css-cvpopp""><strong>configure(HttpSecurity http)</strong>: used to configure the <code class=""chakra-code css-1u83yg1"">HttpSecurity object</code> by chaining methods to express security requirements</li></ul>\n<h3 class=""chakra-heading css-k57syw""><code class=""chakra-code css-1u83yg1"">SecurityConfig.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Configuration</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@EnableWebSecurity</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConfig</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">extends</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebSecurityConfigurerAdapter</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">private</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SecurityConfig</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationService</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>authenticationService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">AuthenticationManagerBuilder</span><span> auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        auth</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticationProvider</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>authenticationService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span> http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">antMatchers</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/signup""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/css/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/js/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">loginPage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/login""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>                </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">defaultSuccessUrl</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/home""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">We can see that the second <code class=""chakra-code css-1u83yg1"">configure</code> method does four things:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Allows all users to access the /signup page, as well as the css and js files.</li><li class=""css-cvpopp"">Allows authenticated users to make any request that\'s not explicitly covered elsewhere.</li><li class=""css-cvpopp"">Generates a login form at /login and allows anyone to access it.</li><li class=""css-cvpopp"">Redirects successful logins to the /home page.</li></ul>\n<p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/resisttheurge/udacity-jwdnd-c1-l4-spring-security-basics/blob/master/src/main/java/com/udacity/jwdnd/spring_security_basics/service/HashService.java"">To see the <code class=""chakra-code css-1u83yg1"">HashService</code> class used in this example, click here.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Onion Pattern</strong>: Sometimes also called Tiered Architecture, Multi-tiered Architecture, or n-tiered Architecture. This is a design pattern that separates areas of the application into controller, service, and data layers (and sometimes more). User flows originate from the controller tier, which passes them to the service tier, which then reaches a data access bean.</li><li class=""css-cvpopp""><strong>Encryption</strong>: Modifying data before storing it, with the intention of using another algorithm to return the data to its original form once it needs to be used.</li><li class=""css-cvpopp""><strong>Hashing</strong>: Modifying data before storing with the intention of never returning it to its original form. The modified data will be compared to other modified data only.</li><li class=""css-cvpopp""><strong>Salt</strong>: random data that is combined with the input string when hashing so that the resultant hashed values are unique for each row. This means that two users with the same password would not have the same hash in the database.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/reference/html5/#jc"">Spring Security Java Configuration<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/builders/HttpSecurity.html"">HttpSecurity JavaDoc<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp"">If you\'d like to learn more about encryption, hashing, and salts, <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.thesslstore.com/blog/difference-encryption-hashing-salting/"">check out this high-level explanation.<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match each of the following objects to their descriptions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Filter</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing methods for taking action when an HttpRequest is received</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">FilterRegistrationBean</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Object used to association filters with URL patterns</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AuthenticationProvider</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing methods for checking user credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">AuthenticationService</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods for checking user credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">HashService</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods for encrypting our secret data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">SecurityConfig</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implements the methods that modify Spring’s configuration to use our Services</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">WebSecurityConfigAdapter</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Interface describing the methods that modify Spring’s security configuration</p></div>']",[],https://www.youtube.com/embed/MWAX6ppeBoc
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.12  Exercise: User Credentials,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.13  Solution: User Credentials,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here is an example <code class=""chakra-code css-1u83yg1"">configure</code> method that meets our requirements:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Override</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">protected</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">configure</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">HttpSecurity</span><span> http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Exception</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authorizeRequests</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">antMatchers</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/order""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/css/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/js/**""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">anyRequest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">authenticated</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">loginPage</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/login""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">permitAll</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   http</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">formLogin</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">defaultSuccessUrl</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""/tacos""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">true</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The first method chain permits all requests to the <code class=""chakra-code css-1u83yg1"">/order</code> page or to our <code class=""chakra-code css-1u83yg1"">css</code> and <code class=""chakra-code css-1u83yg1"">js</code> directories, and then it allows authenticated users to make any kind of request. The next chain permits all users to access the auto-generated login page at <code class=""chakra-code css-1u83yg1"">/login</code>. Remember that Spring creates this for us. Lastly, the third method chain redirects successful logins to the <code class=""chakra-code css-1u83yg1"">/tacos</code> page by default.</p></div>']",[],https://www.youtube.com/embed/_atMetazuAQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.14  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to add data persistence and security to our chat application! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Re-enable Spring Security.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a <code class=""chakra-code css-1u83yg1"">schema.sql</code> file in <code class=""chakra-code css-1u83yg1"">src/main/resources</code> and add the <code class=""chakra-code css-1u83yg1"">USERS</code> and <code class=""chakra-code css-1u83yg1"">MESSAGES</code> table definitions from the instructions above.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the SQL tables you defined.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create MyBatis mappers for the Java model classes you defined.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add user registration and login support using Spring Security.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Restrict access to the <code class=""chakra-code css-1u83yg1"">/chat</code> URL to logged-in users.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">MessageService</code> class to use the mappers you created to add and retrieve messages to and from the database instead of an in-memory list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">chat.html</code> template to remove the username input field from the message submission form.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Update the <code class=""chakra-code css-1u83yg1"">ChatController</code> to retrieve the currently-logged-in user\'s username from Spring Security when handling a message submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Manually test your app! Are you restricted from accessing the chat page without logging in? Can you register a new user? Can you log in with that new user\'s credentials? When that user sends a message, does their registered username show up next to the message? Can you log in as another user and verify that it still shows up with the first user\'s username?</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.15  Solution: Final Review,[],[],https://www.youtube.com/embed/DW8_R1VXTy8
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 5: Data Persistence & Security,5.16  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This lesson covered a lot! First we covered persistent data and learned:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">How to Identify Persistent Data</li><li class=""css-cvpopp"">Where to Store Persistent Data (SQL, in This Case)</li><li class=""css-cvpopp"">How to Use MyBatis, a Simple ORM Framework to Access Our Database</li><li class=""css-cvpopp"">How to Integrate MyBatis with Spring Through Simple Annotations</li></ul>\n<p class=""chakra-text css-o3oz8b"">We also took a peek at Security!</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Explored a Real-World Example of Database Access</li><li class=""css-cvpopp"">Configured Simple Username/Password Authentication</li><li class=""css-cvpopp"">Connected Spring Security’s Configuration with Our User Credentials</li></ul>\n<p class=""chakra-text css-o3oz8b"">We’ve also taken our chat program to the next level by adding persistent storage and authentication to it!</p></div>']",[],https://www.youtube.com/embed/935ABFsq7fg
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.1  Testing with JUnit and Selenium,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lesson Outline</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Lesson Outline</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Testing with JUnit</strong>: We introduce JUnit, the standard testing and assertion framework for Java. We learn how to write new tests and check out assumptions by using JUnit\'s extensive library of assertion methods.</li><li class=""css-cvpopp""><strong>JUnit in Situ</strong>: We look at how we can use IntelliJ (or any other IDE) to run tests, debug errors, and get reports about code coverage.</li><li class=""css-cvpopp""><strong>Selenium/WebDriver</strong>: We introduce Selenium, a tool for browser automation, through its Java API, <code class=""chakra-code css-1u83yg1"">selenium-java</code>. We look at how to write Selenium scripts to simulate user actions in a browser at a high level.</li><li class=""css-cvpopp""><strong>JUnit and Selenium</strong>: We discuss how to use Selenium\'s java API inside of JUnit tests, which opens the door to an advanced technique: automated user testing.</li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edea518_l5-03-lesson-outline/l5-03-lesson-outline.png'],https://www.youtube.com/embed/gvKprZ0TCck
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.2  Why and How,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Test-Driven Development Lifecycle</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the test-driven development lifecycle. First, there is an idea for a new feature. That feature idea is turned into a series of user stories, which are then turned into tests, which fail because the feature does not exist yet. The developers then work on the feature\'s code requirements until all of the tests pass, and the cycle begins anew.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Testing is an important and highly desired part of the software development process. In a world where uptime and user retention means everything, it\'s important to validate that your application actually does what it\'s supposed to <em class=""chakra-text css-o3oz8b"">before</em> it goes into production.</p>\n<p class=""chakra-text css-o3oz8b"">The standard accepted way to enforce this is by adopting a test-driven development lifecycle, or TDD. In this model, the ""red then green"" philosophy is dominant - tests should be written <em class=""chakra-text css-o3oz8b"">before</em> the feature to be tested, meaning that they start off failing - aka, the tests are ""red."" Then, as the feature is implemented, one test after another should start to pass - aka, become ""green.""</p>\n<p class=""chakra-text css-o3oz8b"">To facilitate this approach, it\'s useful to have a standard way to describe features or requirements to be tested. For this, we turn to the concept of a ""user story."" A user story describes the functionality a feature should have from the perspective of a user interacting with the application. Typically, the format of a user story is:</p>\n<p class=""chakra-text css-o3oz8b""><strong>As a user, I can <em class=""chakra-text css-o3oz8b"">take some action</em> in order to <em class=""chakra-text css-o3oz8b"">achieve some goal</em></strong>.</p>\n<p class=""chakra-text css-o3oz8b"">Often a feature will be broken up into many user stories, each of which should correspond to at least one test to be implemented for that feature. If all the tests pass, it means that all of the user stories are successfully implemented, and the feature is complete.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Test Driven Development</strong>: a software development methodology that emphasizes writing tests before the code to be tested. This gives developers a roadmap to success - once all the tests are passing, the feature is complete!</li><li class=""css-cvpopp""><strong>User Story</strong>: User stories are short sentences derived from feature requirements in the format of  <em class=""chakra-text css-o3oz8b"">As a user, I can  in order to </em>. These are used to create tests to verify the components of a feature.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following requirements are testable?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""tacos"" tab to view a list of tacos that are available.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""order taco"" button next to a taco on the tacos tab to add it to my order.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""schedule delivery"" button while viewing an order to see a modal window with a time picker and an address field.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.</p></div>']",['https://video.udacity-data.com/topher/2020/June/5edea620_l5-07-big-picture/l5-07-big-picture.png'],https://www.youtube.com/embed/V4R_I9IpUEA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.3  Testing,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are many different types of tests meant to validate different types of features and different layers of an application. In this course, we\'re going to focus on two specific types of tests: Unit tests and integration tests.</p>\n<p class=""chakra-text css-o3oz8b"">Unit tests are meant to test a single unit or component of an application or process - these tests should be simple, and verify that a specific method, component, or process step acts as expected according to its inputs. Sometimes you\'ll also use unit tests to verify that the unit under test fails predictably, as well; it\'s good to test both positive and negative conditions in a unit test!</p>\n<p class=""chakra-text css-o3oz8b"">Integration tests are the next layer up from unit tests. Instead of testing a single unit of an application, they test multiple units and how they <em class=""chakra-text css-o3oz8b"">integrate</em> with one another. Often, an integration test will validate an entire user story, for example, while a unit test will validate a single step in the process a user story describes.</p>\n<p class=""chakra-text css-o3oz8b"">The rule of thumb is that unit tests should be used to test invariants - conditions that do not change - and integration tests should be used to test user actions and entire process flows .</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Unit Tests</strong>: A unit test only validates the smallest unit of a computational process. That might mean a test of a single method, or a single component in an application.</li><li class=""css-cvpopp""><strong>Invariants</strong>: An invariant is a law of computation, something that shouldn\'t change despite changing circumstances. For example, adding 0 to a number should always result in the original number, and dividing by 0 should always result in an error.</li><li class=""css-cvpopp""><strong>Integration Tests</strong>: Integration tests are intended to validate the operation of multiple application components as they interact with each other - or <em class=""chakra-text css-o3oz8b"">integrate</em> with one another.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Consider the earlier requirement: “As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.”</p>\n<p class=""chakra-text css-o3oz8b"">Would this requirement use a Unit Test or an Integration Test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit Test</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integration Test</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Once more consider the same requirement as above: “As a user, I can click on the ""schedule"" button of the schedule delivery modal to save the time and address selected in the window.”</p>\n<p class=""chakra-text css-o3oz8b"">What are the environment requirements for testing this change?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Browser</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Platform Runtime (JDK)</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Application Files</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Database</p></div>']",[],https://www.youtube.com/embed/K9Y83WIJ40A
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.4  Testing with JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit is the standard Java testing framework, and despite its name, it is capable of much more than unit tests. JUnit expects all tests for an application to be collected in class files, just like any other Java code.</p>\n<h3 class=""chakra-heading css-k57syw"">Annotations</h3>\n<p class=""chakra-text css-o3oz8b"">JUnit provides an annotation, <code class=""chakra-code css-1u83yg1"">@Test</code>, that can be placed on a method in a test class to declare a single test. Each method annotated like this can be either executed individually, or in a group - and in both cases, JUnit will generate a report that lists each test that was run, and whether it was successful or not.</p>\n<p class=""chakra-text css-o3oz8b"">In order for JUnit to know if a test is successful or not we need to use <em class=""chakra-text css-o3oz8b"">assertions</em>. <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated methods should not have a return value! Instead, we can use special methods provided by JUnit to check our assumptions about the code under test. We\'ll look at a concrete example of this in the next video. To begin with, see the list of all annotations <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n<p class=""chakra-text css-o3oz8b"">Sometimes, we need to initialize some data or objects to be used in our test methods. JUnit provides a few extra annotations to define this initialization code. <code class=""chakra-code css-1u83yg1"">@BeforeEach</code>- and <code class=""chakra-code css-1u83yg1"">@AfterEach</code>-annotated methods will be called before an after each <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated method, respectively, and <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>- and <code class=""chakra-code css-1u83yg1"">@AfterAll</code>-annotated methods will be called at the before and after <em class=""chakra-text css-o3oz8b"">all</em> tests have been executed, respectively.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Assertions</h3>\n<p class=""chakra-text css-o3oz8b"">An assertion, in the context of JUnit, is a method we can call to check our assumptions about the behavior of the unit under test. If our assumptions are correct, the assertion silently returns and the test method continues. If they\'re false, the assertion throws a special exception class that JUnit uses to build the final failure report, and the test method halts execution.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b"">Assertions are the static methods defined in the Assertion class. See the list of assertions <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/api/org.junit.jupiter.api/org/junit/jupiter/api/Assertions.html"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> , and an example on how to use assertions in a unit test <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>.</p>\n</blockquote>\n<p class=""chakra-text css-o3oz8b"">For example, <code class=""chakra-code css-1u83yg1"">assertEquals(int expected, int actual)</code> is an assertion method you can call in your test method to assert that the actual and expected integer values are equal. Let\'s see an example implementation of annotations and assertions next.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l4-testing-with-junit-master"">For the full lecture sample code from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In the previous video example, we looked at some basic JUnit tests to learn more about JUnit\'s annotations and assertions. Some key takeaways:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">In a Maven project, it\'s extremely important to make sure your JUnit test classes are in the right directory. Maven expects tests to be in the <code class=""chakra-code css-1u83yg1"">src/test/java</code> directory. Always double check!</li><li class=""css-cvpopp"">JUnit\'s assertions are all static methods on the <code class=""chakra-code css-1u83yg1"">org.junit.jupiter.api.Assertions</code> class, so to use them you need to statically import the methods you need</li><li class=""css-cvpopp"">The most commonly-used assertion is <code class=""chakra-code css-1u83yg1"">assertEquals</code>, which can be used to check if the result of some action <em class=""chakra-text css-o3oz8b"">is equal</em> to the expected result.</li><li class=""css-cvpopp"">Another common assertion is <code class=""chakra-code css-1u83yg1"">assertThrows</code>, which is used to check if a given piece of code <em class=""chakra-text css-o3oz8b"">does</em> throw an exception as expected. This can be useful to check so-called negative test cases, where we want to make sure our application fails <em class=""chakra-text css-o3oz8b"">in the correct way</em>. This assertion uses Java 8\'s lambda expression syntax to capture a piece of code to test - if you\'re not familiar with this syntax, you can find more information about it in the further research section below.</li><li class=""css-cvpopp""><code class=""chakra-code css-1u83yg1"">@BeforeEach</code>-annotated methods are particularly useful for initializing some data that needs to be in the same state for every test. For example in the video, we used this to ensure that a list under test always has the same values at the beginning of each test.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Lifecycle of a JUnit Test Class</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The diagram above shows the lifecycle of a JUnit test class.</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">First, JUnit instantiates the class and calls any method annotated with <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>.</li><li class=""css-cvpopp"">Then it chooses a test to run. It calls any method with the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> method, then it calls the <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated test method.</li><li class=""css-cvpopp"">Finally it calls the <code class=""chakra-code css-1u83yg1"">@AfterEach</code>-annotated method. It repeats this for each <code class=""chakra-code css-1u83yg1"">@Test</code>-annotated method in the class.</li><li class=""css-cvpopp"">When none remain, it calls the <code class=""chakra-code css-1u83yg1"">@AfterAll</code>-annotated method and destroys the test class instance.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/"">Official JUnit User Guide<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://docs.oracle.com/javase/tutorial/java/javaOO/lambdaexpressions.html"">Official Java Tutorial on Java 8\'s Lambda Expression Syntax<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edea5f2_l5-20-testing-with-junit-/l5-20-testing-with-junit-.png'],https://www.youtube.com/embed/Ckz3UlX6Y0k
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.5  JUnit Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of the following entries describe the order of operations for Test-Driven Development (TDD)?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Tests are created first, then Requirements, then code is written based on the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code is written first and then Requirements are created. Unit tests are written to verify the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Requirements are created first, and then code is written. Unit tests are created to verify the code meets the requirements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Requirements are created first, and then unit tests are written that verify the requirements. Code is written to make the unit tests pass.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The JUnit Assert class supports many types of assertions, so you may have to use the JUnit documentation to learn about them all. Which of the following are valid assertions?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertTrue</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertNotNull</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertNotEquals</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertArrayEquals</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">assertArrayEmpty</code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.6  Exercise: JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded445_l5e1/l5e1.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e1.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the <code class=""chakra-code css-1u83yg1"">Course1ApplicationTests.java</code> and <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> files.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Complete the FizzBuzz algorithm such that is passes all tests in <code class=""chakra-code css-1u83yg1"">Course1ApplicationTests.java</code>!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded445_l5e1/l5e1.zip"">L5e1<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.7  Solution: JUnit,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are lots of different ways to solve this problem, but let\'s look at a simple one.</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This solution passes our first three blocks of tests, but fails on the check for divisible by 3 and 5. That part can be passed by checking for divisible by both 3 and 5 (or checking for divisible by 15) first:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>\t\t</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">It still fails the final part of the unit test, however. <code class=""chakra-code css-1u83yg1"">assertThrows</code> expects that an <code class=""chakra-code css-1u83yg1"">IllegalArgumentException</code> is thrown in the event that we try to pass in a 0 or -1. Let\'s try adding the negative number check before returning:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This almost works, but it turns out that 0 mod 3 = 0, and so passing 0 in returns FizzBuzz instead of throwing our exception. The check must be at the top to the top to pass all our unit tests:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&amp;&amp;</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">These unit tests are pretty thorough, but they are not perfect. Consider the following example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">fizzBuzz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">||</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Value must be greater than 0""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">||</span><span> number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">75</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>number </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">%</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">==</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">else</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> number</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">This ALSO passes all our unit tests, despite obviously failing to perform correctly for the values -2 or 30.</p>\n<p class=""chakra-text css-o3oz8b"">It\'s not always practical to test every possible input and output, and so the main goal of our unit tests is to test a good selection of reasonable values, and some typical boundary cases. We could run a loop in this test and look for hundreds of values, but at a certain point you\'re just reimplementing the program inside the unit test and it\'s not worth it. Go for the biggest bang for your buck and rely on integration testing to deal with the occasional outliers!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Assertions are powerful, but what are their limitations? Consider a given method that is hard to test. How would you use JUnit and assertions to test it? How would the test influence a developer to implement the method?</p></div>']",[],https://www.youtube.com/embed/_BqTDhjEqL0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.8  JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When we write tests, it\'s with the intention to run them and report on the results. Test runners like JUnit provide many ways to report the results of a test run, but one of the most useful ways to interact with that reporting is through an IDE, like IntelliJ.</p>\n<p class=""chakra-text css-o3oz8b"">There are three main advantages to running JUnit tests from an IDE:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li></ul>\n<p class=""chakra-text css-o3oz8b"">In the next video, we\'ll take a look at some of these features in IntelliJ while exploring a real-world scenario - fixing failing tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous and next videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this first foray into fixing failing tests, we ran our tests within IntelliJ to get a report of the status of all tests. Initially, these were all failing, but by clicking through IntellliJ\'s test report details, we quickly discovered a common problem to all of the tests: some of the data under test wasn\'t being initialized at all! We solved this by adding an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>-annotated method responsible for that initialization logic. Running the tests again, our report shows that some are slowly turning green - progress! All we needed was a handy overview of the test results, and we could quickly identify a common problem between them.</p>\n<p class=""chakra-text css-o3oz8b"">In the next video, we\'ll explore another tool the IDE provides for this kind of work - debugging.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous and next videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this second attempt to fix our failing tests, we used IntelliJ\'s debugger to check our code under test line-by-line. We found that the conditions our test was validating did not match the code under test - which means we had a decision to make.</p>\n<p class=""chakra-text css-o3oz8b"">Usually, in cases like this, where the test does not match the code it is testing, we have to decide which is correct. In a real-world development scenario, we would check both against the technical requirements provided to us, but since this is just an example, we chose to assume that the code under test was correct.</p>\n<p class=""chakra-text css-o3oz8b"">In any case, debugging helped us find an issue that otherwise might be hard to find. In the next video, we\'ll try to get the remaining tests passing, and we\'ll see how code coverage can help us determine if our code is being sufficiently tested.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-in-situ-master"">For the full lecture sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this final push to get our tests passing, we looked at the remaining failing tests. The first was another issue of test/code not being in sync: our test expected a specific exception to be thrown, but the code under test wasn\'t throwing that exception! This is a good example of why <code class=""chakra-code css-1u83yg1"">assertThrows</code> is useful in a testing context; if our feature requirements or documentation say that a method should throw an exception under certain circumstances, it can cause real problems if it does anything else.</p>\n<p class=""chakra-text css-o3oz8b"">Moving on to the remaining failing test, we saw that it was performing the exact same test as a previous successful test. This is usually a good sign that these tests rely on some data that needs to be initialized  identically before each test. Indeed, we found that the data we initialized with an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code>-annotated method actually needed to be initialized before <em class=""chakra-text css-o3oz8b"">each</em> test, not all of them, so we changed the <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> annotation to <code class=""chakra-code css-1u83yg1"">@BeforeEach</code>.</p>\n<p class=""chakra-text css-o3oz8b"">Finally, to verify that our tests weren\'t overlooking anything in our code base, we re-ran them with IntelliJ\'s <em class=""chakra-text css-o3oz8b"">code coverage</em> feature. This showed us that while our tests were covering nearly all of the lines of code in the project, there was one method we weren\'t testing at all. After adding a test for that method and re-running the test suite with coverage, we saw our entire codebase lit up in green. Nice!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Red, Then Green:</strong> The Test-Driven-Development Motto</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.jetbrains.com/help/idea/performing-tests.html"">An Overview of IntelliJ\'s Test Running Features<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-annotations"">An Overview of All of the Annotations Available in JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://junit.org/junit5/docs/current/user-guide/#writing-tests-assertions"">An Overview of Most of the Assertions Available in JUnit<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edec5e2_l5-37-junit-in-situ-summary/l5-37-junit-in-situ-summary.png'],https://www.youtube.com/embed/Y6hk-YaZS1U
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.9  JUnit in Situ Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">What are some advantages IDEs provide when running unit tests?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Code Coverage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Debugging</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Speed</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Unit Test Reports</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Now that our taco delivery service has gone viral, we need to start making sure our code is appropriately tested. Let’s look at an imperfect example of DeliveryService class and a corresponding test:</p>\n<h3 class=""chakra-heading css-k57syw"">DeliveryService.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Service</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryService</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">OrderService</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">DeliveryMapper</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">OrderService</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>deliveryMapper </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">this</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>orderService </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">scheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span> time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">isBefore</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">now</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery in the past""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">if</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">size</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery for 0 tacos. Why would you do that??""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Scheduling a Delivery""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Timestamp</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">valueOf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>time</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>orderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> id </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">insert</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>   </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Integer</span><span> deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacosForDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">DeliveryServiceTest.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testScheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span> tacos </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTacoName</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fish Fiesta""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setTacoPrice</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3.33</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  orderService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">addItemToOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">scheduleDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">LocalDateTime</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">now</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">plusHours</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Delivery</span><span> delivery </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Assertions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>ORDER_ID</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Assertions</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertArrayEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">TacoOrder</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>tacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span>\n</span><span>        deliveryService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacos</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>delivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getOrderId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">toArray</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Your job is to figure out where our unit test is inadequate. Which of the following lines from DeliveryService will be tested by our unit test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery in the past""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throw</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Cannot schedule a delivery for 0 tacos. Why would you do that??""</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Scheduling a Delivery""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">return</span><span> deliveryMapper</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findTacosForDelivery</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>deliveryId</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.10  Exercise: JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download the starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded990_l5e2/l5e2.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e2.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the files <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> and <code class=""chakra-code css-1u83yg1"">FizzBuzzServiceTest.java</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Look at the buzzFizz method in <code class=""chakra-code css-1u83yg1"">FizzBuzzService.java</code> and write unit tests for it in <code class=""chakra-code css-1u83yg1"">FizzBuzzServiceTest.java</code>!</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/June/5eded990_l5e2/l5e2.zip"">L5e2<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.11  Solution: JUnit in Situ,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are quite a few holes in this implementation. Here’s one way to organize your tests to identify failures:</p>\n<h3 class=""chakra-heading css-k57syw"">FizzBuzzServiceTest.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_happyPath</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// expected to pass</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">101</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""101""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">9</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">10</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">15</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">30</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""FizzBuzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_unclearRepetition</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// requirements unclear - does ""FizzBuzz"" count as a ""Fizz"" and a ""Buzz"" as well?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// both these tests fail because they return \'15\', which is ""FizzBuzz""</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">18</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">20</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_invalidStrings</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// should this be case insensitive?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertEquals</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">3</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//throws number format exception</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// what to do about nonsense input?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""tacocat""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">testBuzzFizz_boundaryChecking</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span> fbs </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">FizzBuzzService</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// how should the program represent that no input produces the output. This example would</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// return the integer -1, which is incorrect. Should we throw an exception, return 0 or some other value?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""-1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// what about integers recurrence? There should never be a second occurrence</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// of ""1"", so what do we expect the program to do?</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""1""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">2</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>  </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// we can also enter invalid occurrence param for ""Fizz"" or ""Buzz"", getting back 0 or negative numbers</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Fizz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// returns 0</span><span>\n</span><span>  </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">assertThrows</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">IllegalArgumentException</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> fbs</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">buzzFizz</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Buzz""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-</span><span class=""token"" style=""color: rgb(2, 124, 124);"">1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// returns -5</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span></code></div></div></pre></div>']",[],https://www.youtube.com/embed/N3h_89BkAuo
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.12  Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Our goal in this section is to expand our testing acumen beyond simple unit tests into the realm of integration tests. Specifically, we want to be able to test our web application\'s abilities from the high-level perspective of user actions. In order to do this, we need a way to programmatically simulate a user\'s action in the browser. That\'s where Selenium comes in.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium is a cross-platform tool for browser automation and scripting, and we\'re going to use it to write tests that simulate a user\'s actions in a browser. In the next video, we\'ll look at how Selenium\'s API functions in detail.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>The Architecture of Selenium</strong></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The figure above shows the architecture of selenium. Test scripts written using Selenium\'s Java API are translated by Selenium to work on different browsers using different drivers.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-selenium-webdriver-master"">For the complete lecture code sample from the previous video, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In this video, we looked at the basic elements of a Selenium script. Here\'s the full script we examined:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    public static void main(String[] args) throws InterruptedException {\n</span>        WebDriverManager.chromedriver().setup();\n        WebDriver driver = new ChromeDriver();\n        driver.get(""http://www.google.com"");\n        WebElement inputField = driver.findElement(By.name(""q""));\n        inputField.sendKeys(""selenium"");\n        inputField.submit();\n        List&lt;WebElement&gt; results = driver.findElements(By.cssSelector(""div.g a""));\n        for (WebElement element : results) {\n            String link = element.getAttribute(""href"");\n            System.out.println(link);\n        }\n        Thread.sleep(5000);\n        driver.quit();\n    }</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Every Selenium script has to start by initializing a web driver. Since we\'re using WebDriverManager (documentation links below), we can use it to automatically download the binary file for Selenium\'s driver for Google Chrome, and then we can initialize the driver without any additional work.</p>\n<p class=""chakra-text css-o3oz8b"">Once we have a driver, we need to tell it which web page to visit. We do this with <code class=""chakra-code css-1u83yg1"">driver.get(""http://www.google.com"");</code> in the script, but if we were testing one of our own applications, like the message page from earlier this course, we would have to change the URL to something like <code class=""chakra-code css-1u83yg1"">http://localhost:8080/home</code>.</p>\n<p class=""chakra-text css-o3oz8b"">In order to interact with or extract data from the web page, we first need to select the required HTML elements on the page. In this example, we use <code class=""chakra-code css-1u83yg1"">driver.findElement(By.name(""q""));</code> to select the google search input element. A detailed explanation of this process can be found below.</p>\n<p class=""chakra-text css-o3oz8b"">In order to interact with the elements we\'ve selected, we can call various methods on them. In this case, we\'re using <code class=""chakra-code css-1u83yg1"">inputField.sendKeys(""selenium"");</code> to simulate typing the word <code class=""chakra-code css-1u83yg1"">selenium</code> into google, and we\'re using <code class=""chakra-code css-1u83yg1"">inputField.submit();</code> to simulate submitting the search form.</p>\n<p class=""chakra-text css-o3oz8b"">Once we\'ve interacted with the web page, we want to read in the results and print them out. Again, we use the same process for finding an element, but this time, we use <code class=""chakra-code css-1u83yg1"">driver.findElements()</code> to get a list of matching elements, instead of a single one.</p>\n<p class=""chakra-text css-o3oz8b"">The final part of every Selenium script is shutting down the driver. Since the driver is an external program, if we don\'t call <code class=""chakra-code css-1u83yg1"">driver.quit()</code>, the automated browser window will never close on its own.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Web Driver</strong>: In order for Selenium to assume control of a browser, it needs a program to interface with the specific browser\'s API. This program is called a web driver, and there are different web drivers for each major browser.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/bonigarcia/webdrivermanager"">WebDriverManager on Github, with Documentation on Its Use and Motivation<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/getting_started_with_webdriver/locating_elements/"">Official Selenium Documentation on Finding Elements on a Web Page, with Code Examples<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model/Introduction"">DOM: Overview and the fundamental data types<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",['https://video.udacity-data.com/topher/2020/June/5edec654_l5-53-selenium-webdriver/l5-53-selenium-webdriver.png'],https://www.youtube.com/embed/zniCcO2lgX0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.13  Selenium/WebDriver Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Here’s a little HTML snippet from our exercise back in the lesson on Thymeleaf. Look familiar? What do you think this Selenium script will do if run on this page?</p>\n<h3 class=""chakra-heading css-k57syw"">home.html</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">head</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>           </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">id</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submit”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">if</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Hello, homepage!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>       </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">unless</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">${firstVisit}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>Welcome back!</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">h1</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">body</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">html</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<h3 class=""chakra-heading css-k57syw"">SeleniumExample.java</h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InterruptedException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chromedriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setup</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span> driver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://localhost:8080/simplehome""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>“submit”</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Thread</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sleep</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>   driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">quit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in your current browser, find the button with the id “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the button with the id “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the field with the id “submit” and position the cursor in the field.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open <code class=""chakra-code css-1u83yg1"">http://localhost:8080/simplehome</code> in a new Chrome browser, find the button with the type “submit” and click it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Our previous example had an id, which is pretty handy! In fact, as a developer, you should get in the habit of always adding ids to any page elements that might be useful to reference in testing. However, we don’t always have the luxury of referencing an element by its id. Here’s a similar input field, but with no id!</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-html"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”simpleForm”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">#</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124); opacity: 1;"">th:</span><span class=""token"" style=""color: rgb(2, 124, 124);"">action</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">@{</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">/simplehome</span><span class=""token"" style=""color: rgb(15, 43, 61);"">\'</span><span class=""token"" style=""color: rgb(221, 17, 68);"">}</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">method</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">POST</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span>   </span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token"" style=""color: navy;"">input</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">class</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submitButton”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">name</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(221, 17, 68);"">”submit”</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">type</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: navy;""> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">value</span><span class=""token attr-equals"" style=""color: rgb(15, 43, 61);"">=</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(221, 17, 68);"">Visit me</span><span class=""token"" style=""color: rgb(15, 43, 61);"">""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">&lt;/</span><span class=""token"" style=""color: navy;"">form</span><span class=""token"" style=""color: rgb(15, 43, 61);"">&gt;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Which of the following statements can still reference this input element?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.name(""submit"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.className(""submitButton"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.tagName(""input"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.cssSelector(""input.submitButton"")).click(); </code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.xpath(""//input[@value=\'Visit me\']"")).click(); </code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.14  Exercise: Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">This project will be built locally on your machine using the following instructions:</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Download your old project from the <em class=""chakra-text css-o3oz8b"">Connecting Controllers to Templates</em> Exercise, or download new starter code <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/July/5f246c61_l5e3/l5e3.zip"">here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a>. It can also be found in the Resources tab titled <code class=""chakra-code css-1u83yg1"">l5e3.zip</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Open the project in IntelliJ.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the WebDriverManager to create a new WebDriver for Chrome.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use the WebDriver to get the url: <code class=""chakra-code css-1u83yg1"">http://localhost:8080/animal</code>.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find both input fields and write values to them.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Submit the form 5 times.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Find the conclusion message and write its contents to the console.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">Supporting Materials</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://video.udacity-data.com/topher/2020/July/5f246c61_l5e3/l5e3.zip"">L5e3<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.15  Solution: Selenium/WebDriver,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Below is the sample solution. You can try playing around with the provided solution.</p>\n<h3 class=""chakra-heading css-k57syw"">File: <code class=""chakra-code css-1u83yg1"">/l5e3/src/test/java/com/example/demo/SeleniumTest.java</code></h3>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">package</span><span> </span><span class=""token"" style=""opacity: 1;"">com</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">example</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">demo</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">io</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">github</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">bonigarcia</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">wdm</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">junit</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">jupiter</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">api</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Test</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">openqa</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">selenium</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">chrome</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">org</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">springframework</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">boot</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">test</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">context</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SpringBootTest</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n\n<span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">import</span><span> </span><span class=""token"" style=""opacity: 1;"">java</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""opacity: 1;"">util</span><span class=""token"" style=""opacity: 1; color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@SpringBootTest</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">class</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">SeleniumTest</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>    </span><span class=""token annotation"" style=""color: rgb(15, 43, 61);"">@Test</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">static</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">main</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">[</span><span class=""token"" style=""color: rgb(15, 43, 61);"">]</span><span> args</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">throws</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">InterruptedException</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//start the driver, open chrome to our target url</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverManager</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">chromedriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">setup</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriver</span><span> driver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">ChromeDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">get</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""http://localhost:8080/animal""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">//find the fields we want by id and fill them in</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""animalText""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Manatee""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""adjective""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""Whirling""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">List</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&lt;</span><span class=""token generics"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span class=""token generics"" style=""color: rgb(15, 43, 61);"">&gt;</span><span> trainingResults </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElements</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">className</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""trainingMessage""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// The field-values don’t clear on submit for our simple app, so just submit it 5 times</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// However, the elements gets removed from the DOM structure after each submit.</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">for</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">int</span><span> i </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">0</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> i </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">&lt;</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">5</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span> i</span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">++</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// We are re-assigning the inputField because this element gets removed from the DOM structure after each iteration.</span><span>\n</span><span>            </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// Otherwise, you\'ll get org.openqa.selenium.StaleElementReferenceException at runtime.</span><span>\n</span><span>            inputField </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""adjective""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>            inputField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">submit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>            </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""trainingResults.size() = ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> trainingResults</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">size</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(113, 113, 101); font-style: italic;"">// then get the element by the class conclusionMessage and print it</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> conclusionResult </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">className</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""conclusionMessage""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">System</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span>out</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">println</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""conclusionResult.getText() = ""</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">+</span><span> conclusionResult</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">getText</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>        </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">Thread</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sleep</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(2, 124, 124);"">5000</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">quit</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">You\'ll notice that the web-browser closes automatically after all the iterations are completed.</p>\n<blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Note</strong> - The code above is written for the Chrome browser. However, you can change the code for your respective browser. For other browsers, refer to the README of <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/bonigarcia/webdrivermanager#webdrivermanager-as-java-dependency"">WebDriverManager<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for a corresponding method.</p>\n</blockquote></div>']",[],https://www.youtube.com/embed/I8iazfgyGSk
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.16  JUnit and Selenium,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium and JUnit are a natural fit for one another. Both are plain Java libraries, and don\'t require any special syntax or approach to integrate with one another. We can use Selenium\'s driver to navigate the web, interact with elements on the page, and extract data from those elements, and we can use JUnit\'s assertions to check the data that is returned against expected values.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium also requires some initialization logic, like setting up the web driver and navigating to the correct URL to perform further actions on. JUnit\'s <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> annotation is perfect for writing a method to initialize the web driver, and we can use the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> annotation to write a method that navigates to a common starting URL for all tests in the class. Finally, since we need to make sure we quit the web driver once our tests are finished, we can use JUnit\'s <code class=""chakra-code css-1u83yg1"">@AfterAll</code> annotation to define a method that takes care of that.</p>\n<p class=""chakra-text css-o3oz8b"">Selenium provides another useful tool for JUnit test organization - the Page Object. A Page Object is a Java class that is meant to represent a specific web page under test. We can use Page Objects to reduce boilerplate when writing Selenium scripts, and, as we\'ll see in the next video, we can even use them to make our test code resemble the user stories under test.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-and-selenium-master"">For the full lecture sample sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">In the previous video, we looked at a simple counter application, with some text to display the current count, an increment button, and a reset button. Our goal is to write some JUnit and Selenium code to test that all of the essential features of the app are functioning correctly. First, though, we want a Selenium Page Object to represent the page we\'re testing. Here\'s the full <code class=""chakra-code css-1u83yg1"">CounterPage</code> class from the example:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>public class CounterPage {\n</span>\n    @FindBy(id = ""count-display"")\n    private WebElement countDisplay;\n\n    @FindBy(id = ""increment-button"")\n    private WebElement incrementButton;\n\n    @FindBy(id = ""reset-value-field"")\n    private WebElement resetValueField;\n\n    @FindBy(id = ""reset-button"")\n    private WebElement resetButton;\n\n    public CounterPage(WebDriver driver) {\n        PageFactory.initElements(driver, this);\n    }\n\n    public int getDisplayedCount() {\n        return Integer.parseInt(countDisplay.getText());\n    }\n\n    public void incrementCount() {\n        incrementButton.click();\n    }\n\n    public void resetCount(int value) {\n        resetValueField.clear();\n        resetValueField.sendKeys(String.valueOf(value));\n        resetButton.click();\n    }\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There are three main sections to this, and any, Page Object:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Defining Element Selectors</strong>\n```Java\n@FindBy(id = ""count-display"")\nprivate WebElement countDisplay;</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-python"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""increment-button""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement incrementButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""reset-value-field""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>\n<span>    </span><span class=""token decorator annotation"" style=""color: rgb(15, 43, 61);"">@FindBy</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(0, 121, 162);"">id</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(221, 17, 68);"">""reset-button""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span>\n</span><span>    private WebElement resetButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span>```</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">The goal of a Page Object is to simplify and abstract away common Selenium tasks, like finding elements on the page. Previously, we did this with <code class=""chakra-code css-1u83yg1"">driver.findElement</code> and <code class=""chakra-code css-1u83yg1"">driver.findElements</code>, but in a Page Object, we can take a much more Spring-like approach by declaring annotated fields representing the elements we want to capture on the page. These element selectors will be automatically processed by Selenium, but we have to kick that process off ourselves - which we do in the next section:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Initializing Elements in the Constructor</strong>\n<code class=""chakra-code css-1u83yg1"">Java         public CounterPage(WebDriver driver) {             PageFactory.initElements(driver, this);         }     </code></p>\n<p class=""chakra-text css-o3oz8b"">In this example, we declare a WebDriver as the only constructor argument, and we call <code class=""chakra-code css-1u83yg1"">PageFactory.initElements()</code> with the driver and the <code class=""chakra-code css-1u83yg1"">this</code> keyword as arguments. This is shorthand to tell Selenium to use the given driver to initialize the <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields in the class. In principle, we could do this somewhere else, but as we\'ll see in the next video, initializing a Page Object in its constructor like this is pretty flexible and clean.</p>\n<p class=""chakra-text css-o3oz8b"">By adding this constructor, whenever we create a new <code class=""chakra-code css-1u83yg1"">CounterPage</code> object, Selenium will automatically find and capture the elements we declared, reducing a bunch of similar calls to <code class=""chakra-code css-1u83yg1"">driver.findElement</code> to a single <code class=""chakra-code css-1u83yg1"">new CounterPage()</code> instantiation. Once we have those elements, we can move on to the next section:</p>\n<p class=""chakra-text css-o3oz8b""><strong>Creating Helper Methods</strong>\n```Java\npublic int getDisplayedCount() {\nreturn Integer.parseInt(countDisplay.getText());\n}</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-javascript"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">incrementCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        incrementButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span>\n<span>    </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">public</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">void</span><span> </span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">resetCount</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token parameter"">int value</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61);"">{</span><span>\n</span><span>        resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">clear</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        resetValueField</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">sendKeys</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token known-class-name"" style=""color: rgb(68, 85, 136); font-weight: bold;"">String</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">valueOf</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>value</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>        resetButton</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token method property-access"" style=""color: rgb(153, 0, 0); font-weight: bold;"">click</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span>    </span><span class=""token"" style=""color: rgb(15, 43, 61);"">}</span><span>\n</span><span></span><span class=""token template-string template-punctuation"" style=""color: rgb(221, 17, 68);"">`</span><span class=""token template-string template-punctuation"" style=""color: rgb(221, 17, 68);"">`</span><span>`</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">Now that our Page Object has selected elements from the page it represents, we can define helper methods that encapsulate common tasks for the page. In this counter example, we need to be able to read the current count from the screen, we need to be able to increment the count, and we need to reset the count. Notice that I didn\'t mention any specific elements to describe the functionality of these actions - while we have to be specific in our implementation of these methods, as you can see in the code above, the goal of writing these helpers is to separate the <em class=""chakra-text css-o3oz8b"">action taken on the class</em> from <em class=""chakra-text css-o3oz8b"">the specific element interactions required to fulfill that action</em>. In some ways, this is another instance of separation of concerns - by hiding the implementation details in these methods, if the HTML of the page ever changes, we don\'t have to update anything except the code inside this class - the tests that will use this class can just continue to call the same methods they did before.</p>\n<p class=""chakra-text css-o3oz8b"">Speaking of tests - now that we\'ve set up the <code class=""chakra-code css-1u83yg1"">CounterPage</code> class, we can finally implement some tests for this app.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://github.com/udacity/nd035-c1-spring-boot-basics-examples/tree/master/udacity-jwdnd-c1-l5-junit-and-selenium-master"">For the full lecture sample code from the previous videos, click here<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p>\n<p class=""chakra-text css-o3oz8b"">Here\'s the full JUnit test class from the previous video:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-Java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span>@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\n</span>class UserTestingApplicationTests {\n    @LocalServerPort\n    private Integer port;\n\n    private static WebDriver driver;\n    private CounterPage counter;\n\n    @BeforeAll\n    public static void beforeAll() {\n        WebDriverManager.chromedriver().setup();\n        driver = new ChromeDriver();\n    }\n\n    @AfterAll\n    public static void afterAll() {\n        driver.quit();\n    }\n\n    @BeforeEach\n    public void beforeEach() {\n        driver.get(""http://localhost:"" + port + ""/counter"");\n        counter = new CounterPage(driver);\n    }\n\n    @Test\n    public void testIncrement() {\n        int prevValue = counter.getDisplayedCount();\n        counter.incrementCount();\n        assertEquals(prevValue + 1, counter.getDisplayedCount());\n    }\n\n    @Test\n    public void testIncrementTenTimes() {\n        int prevValue = counter.getDisplayedCount();\n        for (int i = 0; i &lt; 10; i++) {\n            assertEquals(prevValue + i, counter.getDisplayedCount());\n            counter.incrementCount();\n        }\n    }\n\n    @Test\n    public void testReset() {\n        counter.resetCount(10);\n        assertEquals(10, counter.getDisplayedCount());\n        counter.resetCount(0);\n        assertEquals(0, counter.getDisplayedCount());\n    }\n\n}</code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">There are a few things we have to do to set up a test file for a Spring Boot app. The main thing is that we have to make sure our server is running before the tests start - we do that here with\n<code class=""chakra-code css-1u83yg1"">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</code>. This tells JUnit to run the application before any tests are executed, with a random port number instead of the default <code class=""chakra-code css-1u83yg1"">8080</code>. This is useful because it means we can have multiple copies of the app running at the same time, which is common in development and testing environments.</p>\n<p class=""chakra-text css-o3oz8b"">Of course, we need to know what the random port ends up being so that we can use Selenium\'s <code class=""chakra-code css-1u83yg1"">driver.get()</code> method to navigate the browser to our app. Spring makes this easy for us with the <code class=""chakra-code css-1u83yg1"">@LocalServerPort</code> annotation. Spring will inject the current port into a field annotated with this like the example above.</p>\n<p class=""chakra-text css-o3oz8b"">As we mentioned in the video, we set up the Selenium driver in an <code class=""chakra-code css-1u83yg1"">@BeforeAll</code> method, and we quit it in an <code class=""chakra-code css-1u83yg1"">@AfterAll</code> method. However, the magic really starts with the <code class=""chakra-code css-1u83yg1"">@BeforeEach</code> method - here, we navigate to the <code class=""chakra-code css-1u83yg1"">/countert</code> URL and initialize a new <code class=""chakra-code css-1u83yg1"">CounterPage</code> object. This means that every test will start from this URL and with a fresh <code class=""chakra-code css-1u83yg1"">CounterPage</code> object - which makes test development extremely simple.</p>\n<p class=""chakra-text css-o3oz8b"">As you can see from the rest of the tests, we simply use the helper methods we defined on <code class=""chakra-code css-1u83yg1"">CounterPage</code> to perform all actions in and retrieve all data from the browser. This makes our test code highly legible, and each test starts to look a lot like a user story - for example, for increment, we could read the test as</p>\n<p class=""chakra-text css-o3oz8b""><strong>As a user, I can increment the count in order to see the displayed count increase by one</strong></p>\n<p class=""chakra-text css-o3oz8b"">And the code doesn\'t look far off from that statement! That\'s a truly powerful abstraction.</p>\n<h3 class=""chakra-heading css-k57syw"">Key Terms</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Page Object</strong>: a special POJO variant that can be defined for use with Selenium. A Page Object should have <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields that represent the key HTML elements under test, and should have helper methods that define high-level utilities and user actions on the page under test.</li></ul>\n<h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/guidelines_and_recommendations/page_object_models/"">Official Selenium Guide to Using Page Objects<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/9v9LCcVvZ7I
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.17  JUnit and Selenium Quizzes,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Match the following Selenium actions with their location in a Java Unit test class.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">WebDriverManager.chromedriver().setup();</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.quit();</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.findElement(By.id(“bazz”));</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">driver.get(“http://my-webpage.biz/fizzBuzz”);</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@BeforeAll</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@BeforeEach</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@Test</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><code class=""chakra-code css-1u83yg1"">@AfterAll</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Imagine we’re creating a JUnit for the exercise we did earlier with our /animals page. We want to submit the form multiple times and make sure the message changes when we get to our 5th submission. Which JUnit and Selenium components can help us write this test?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium Page Object Model</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit Assertions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium <code class=""chakra-code css-1u83yg1"">WebDriver.get</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Selenium <code class=""chakra-code css-1u83yg1"">By.cssSelector</code></p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">JUnit <code class=""chakra-code css-1u83yg1"">@AfterEach</code></p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.18  Page Load Times,"['<div class=""ureact-markdown css-tc5hjw""><blockquote class=""css-6jmydm"">\n<p class=""chakra-text css-o3oz8b""><strong>Erratum</strong> - In the video above, the time argument passed to the <code class=""chakra-code css-1u83yg1"">WebDriverWait()</code> constructor is in <em class=""chakra-text css-o3oz8b"">Seconds</em>, instead of <em class=""chakra-text css-o3oz8b"">Milliseconds</em>. Refer to the <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://selenium-python.readthedocs.io/waits.html"">WebDriverWait docs<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> for more information and examples.</p>\n</blockquote></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Using Selenium, if a page takes a while to load, do we need to make sure the driver waits before searching for elements that might not yet exist on the page?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes, because the driver will throw an exception if an element is not found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No, because the driver will return null if the element is not found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Yes, because the driver will return an empty WebElement if it can\'t be found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">No, because the driver will create the element in the browser if it can\'t be found.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Which of these solutions is the best way to wait for a page to load before beginning your Selenium tests?</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add a <code class=""chakra-code css-1u83yg1"">Thread.sleep()</code> to make sure the page has enough time to load</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use a WebDriverWait object to wait until the webDriver finds a specific element on the page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use WebDriverWait object(s) to wait for multiple page elements.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Use a loop to attempt loading elements multiple times, with a try-catch block to intercept exceptions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In the real world, things get complicated, fast. Nowhere is this more apparent than when trying to account for page load times when automating user testing.</p>\n<p class=""chakra-text css-o3oz8b"">On the web, page load times can vary wildly according to different internet providers, the size of the resources a page has to load, the speed at which the server handles requests, and so on. It\'s virtually impossible to predict exactly when a page will load, and this presents a problem for testing; if we ask Selenium to find an element on a page before the page finishes loading, it\'s going to fail and we\'re going to have something like a big, fat <code class=""chakra-code css-1u83yg1"">NullpointerException</code> or a <code class=""chakra-code css-1u83yg1"">StaleElementReferenceException </code> on our hands. The <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://developer.mozilla.org/en-US/docs/Web/WebDriver/Errors/StaleElementReference#:~:text=When%20an%20element%20is%20no,it%20was%20retrieved%20from%20navigates."">StaleElementReferenceException<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a> may occur in case of a delayed-<strong>re</strong>load.</p>\n<p class=""chakra-text css-o3oz8b"">So how do we make sure an element is on the page before we ask Selenium to look for it?</p>\n<p class=""chakra-text css-o3oz8b"">The answer is to use a <code class=""chakra-code css-1u83yg1"">WebDriverWait</code>, which is a class Selenium provides just for this purpose. Let\'s look at the following code:</p>\n<pre class=""css-0""><div data-defines-codeblock=""true"" tabindex=""0"" class=""css-1y373wj""><div style=""color: rgb(15, 43, 61); text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><code class=""language-java"" style=""color: rgb(15, 43, 61); background: none; text-shadow: white 0px 1px; font-family: &quot;Fira Code&quot;, Consolas, Monaco, &quot;Andale Mono&quot;, &quot;Ubuntu Mono&quot;, monospace; font-size: 1em; text-align: left; white-space: pre; word-spacing: normal; word-break: normal; overflow-wrap: normal; line-height: 1.5; tab-size: 4; hyphens: none;""><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverWait</span><span> wait </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> </span><span class=""token"" style=""color: rgb(15, 43, 61); font-weight: bold;"">new</span><span> </span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebDriverWait</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>driver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">,</span><span> </span><span class=""token"" style=""color: rgb(2, 124, 124);"">10</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span><span>\n</span><span></span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">WebElement</span><span> marker </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">=</span><span> wait</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">until</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span>webDriver </span><span class=""token"" style=""color: rgb(15, 43, 61); background: rgb(255, 255, 255);"">-&gt;</span><span> webDriver</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">findElement</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(68, 85, 136); font-weight: bold;"">By</span><span class=""token"" style=""color: rgb(15, 43, 61);"">.</span><span class=""token"" style=""color: rgb(153, 0, 0); font-weight: bold;"">id</span><span class=""token"" style=""color: rgb(15, 43, 61);"">(</span><span class=""token"" style=""color: rgb(221, 17, 68);"">""page-load-marker""</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">)</span><span class=""token"" style=""color: rgb(15, 43, 61);"">;</span></code></div></div></pre>\n<p class=""chakra-text css-o3oz8b"">In this example, we create a new <code class=""chakra-code css-1u83yg1"">WebDriverWait</code> instance using a driver and a timeout in seconds. <code class=""chakra-code css-1u83yg1"">WebDriverWait</code> defines a method called <code class=""chakra-code css-1u83yg1"">until</code> that we use in the next line to force Selenium to pause <em class=""chakra-text css-o3oz8b"">until</em> the specified element is found, or the timeout is reached.</p>\n<p class=""chakra-text css-o3oz8b"">This is extremely handy, since we can now ensure that Selenium waits and continues in a structured way.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Further Research</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""https://www.selenium.dev/documentation/en/webdriver/waits/"">Official Selenium Guide to Waits<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></li></ul></div>']",[],https://www.youtube.com/embed/AQgVt_WmLEA
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.19  Final Review,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">It\'s time to add automated user testing to our chat application! Update your previous final review project according to the tasks below, and refer back to the instructions above for the high-level goals and code snippets to include in your project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Add Selenium and WebDriverManager dependencies to the project.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Page Objects for the HTML templates involved in the tests.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write at least one high-level JUnit test that tests a new user\'s registration, login, and first message.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Run your tests and verify that the app functions as expected; if it doesn\'t, identify the problem and solve it, and verify your solution by re-running the tests.</p></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.20  Solution: Final Review,"['<div class=""ureact-markdown css-tc5hjw""><h3 class=""chakra-heading css-k57syw"">Glossary</h3>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp""><strong>Test Driven Development</strong>: a software development methodology that emphasizes writing tests before the code to be tested. This gives developers a roadmap to success - once all the tests are passing, the feature is complete!</li><li class=""css-cvpopp""><strong>User Story</strong>: User stories are short sentences derived from feature requirements in the format of  <em class=""chakra-text css-o3oz8b"">As a user, I can  in order to </em>. These are used to create tests to verify the components of a feature.</li><li class=""css-cvpopp""><strong>Unit Tests</strong>: A unit test only validates the smallest unit of a computational process. That might mean a test of a single method, or a single component in an application.</li><li class=""css-cvpopp""><strong>Invariants</strong>: An invariant is a law of computation, something that shouldn\'t change despite changing circumstances. For example, adding 0 to a number should always result in the original number, and dividing by 0 should always result in an error.</li><li class=""css-cvpopp""><strong>Integration Tests</strong>: Integration tests are intended to validate the operation of multiple application components as they interact with each other - or <em class=""chakra-text css-o3oz8b"">integrate</em> with one another.</li><li class=""css-cvpopp""><strong>Assertion</strong>: an assertion, in the context of JUnit, is a method we can call to check our assumptions about the behavior of the unit under test. If our assumptions are correct, the assertion silently returns and the test method continues. If they\'re false, the assertion throws a special exception class that JUnit uses to build the final failure report, and the test method halts execution.</li><li class=""css-cvpopp""><strong>Interactive Reporting</strong>: When we run tests in an IDE, we can usually inspect the results of each test individually. If an assertion fails or an unexpected exception is triggered, the stack trace and circumstances will be shown in the details for each test, and clickable links in the results help you navigate to problem areas in your code.</li><li class=""css-cvpopp""><strong>Interactive Debugging</strong>: When a pernicious problem persists, it can often be helpful to step through the code\'s execution line-by-line to inspect both the control flow and the values in memory used by the program. This is called debugging, and while it\'s technically possible to do outside of an IDE, IDEs like IntelliJ provide many useful tools for making the process as painless as possible.</li><li class=""css-cvpopp""><strong>Code Coverage Reports</strong>: When we run code in an IDE like IntelliJ, we can choose to have the IDE track which lines of our code were visited, and how many times. This can be wildly useful when trying to track down why a branch of a condition isn\'t being reached, as well as when determining how much the entire code base is covered by the currently-implemented tests.</li><li class=""css-cvpopp""><strong>Web Driver</strong>: In order for Selenium to assume control of a browser, it needs a program to interface with the specific browser\'s API. This program is called a web driver, and there are different web drivers for each major browser.</li><li class=""css-cvpopp""><strong>Page Object</strong>: a special POJO variant that can be defined for use with Selenium. A Page Object should have <code class=""chakra-code css-1u83yg1"">@FindBy</code>-annotated fields that represent the key HTML elements under test, and should have helper methods that define high-level utilities and user actions on the page under test.</li></ul></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.21  Lesson Conclusion,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">In this lesson, you learned about test-driven development and user stories, JUnit and IntelliJ\'s tools for test running, and how to use Selenium to simulate a user\'s actions in an automated browser. Learning how to use these tools allowed you to write automated tests for the chat application you\'ve been building this whole course, and with the rest of the skills you\'ve acquired so far, you\'re ready to take on a larger, more complicated project and still feel confident that it is robust. More on that in the final project instructions.</p></div>']",[],https://www.youtube.com/embed/Lw0BdKMpdmQ
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.22  Course Recap,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b""><strong>Look How Far You\'ve Come!</strong></p></div>']",['https://video.udacity-data.com/topher/2020/June/5edecc78_l0-30-course-outline/l0-30-course-outline.jpg'],https://www.youtube.com/embed/iDkcmoboXs0
Java Web Developer,COURSE 2:Spring Boot Basics,Lesson 6: Testing,6.23  Congratulations!,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">You\'ve worked so hard, and you should be proud of all of the work you\'ve done. You\'re on your way to becoming a Java Web Developer!</p></div>']",[],https://www.youtube.com/embed/FZTGXlHWsgk
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.1  Project Overview,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.2  Project Directions,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Login page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/login"">http://localhost:8080/login<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh""><strong>2. Signup Page</strong></h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">Everyone should be allowed access to this page, and potential users can use this page to sign up for a new account.</li><li class=""css-cvpopp"">Validate that the username supplied does not already exist in the application, and show such signup errors on the page when they arise.</li><li class=""css-cvpopp"">Remember to store the user\'s password securely!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Sign Up page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/signup"">http://localhost:8080/signup<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><h4 class=""chakra-heading css-1dlhxqh"">3. Home Page</h4>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The home page should have a logout button that allows the user to log out of the application and keep their data private.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The home page is the center of the application and hosts the three required pieces of functionality. The existing template presents them as three tabs that can be clicked through by the user:</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">i. Files</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to upload files and see any files they previously uploaded.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Home page: <a target=""_blank"" rel=""noopener noreferrer"" class=""chakra-link css-190botj"" href=""http://localhost:8080/home"">http://localhost:8080/home<span class=""chakra-text css-1lktits"">(opens in a new tab)</span></a></p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">The user should be able to view/download or delete previously-uploaded files.</p>\n</li><li class=""css-cvpopp"">\n<p class=""chakra-text css-o3oz8b"">Any errors related to file actions should be displayed. For example, a user should not be able to upload two files with the same name, but they\'ll never know unless you tell them!</p>\n</li></ul>\n<p class=""chakra-text css-o3oz8b"">ii. Notes</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to create notes and see a list of the notes they have previously created.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to edit or delete previously-created notes.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">iii. Credentials:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to store credentials for specific websites and see a list of the credentials they\'ve previously stored. If you display passwords in this list, make sure they\'re encrypted!</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">The user should be able to view/edit or delete individual credentials. When the user views the credential, they should be able to see the unencrypted password.</li></ul></div>']","['https://video.udacity-data.com/topher/2020/March/5e698e86_screen-shot-2020-03-11-at-6.20.37-pm/screen-shot-2020-03-11-at-6.20.37-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698ee3_screen-shot-2020-03-11-at-6.22.13-pm/screen-shot-2020-03-11-at-6.22.13-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f20_screen-shot-2020-03-11-at-6.23.09-pm/screen-shot-2020-03-11-at-6.23.09-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f5a_screen-shot-2020-03-11-at-6.24.09-pm/screen-shot-2020-03-11-at-6.24.09-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e698f98_screen-shot-2020-03-11-at-6.25.12-pm/screen-shot-2020-03-11-at-6.25.12-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e699026_screen-shot-2020-03-11-at-6.27.32-pm/screen-shot-2020-03-11-at-6.27.32-pm.png', 'https://video.udacity-data.com/topher/2020/March/5e69905a_screen-shot-2020-03-11-at-6.28.26-pm/screen-shot-2020-03-11-at-6.28.26-pm.png']",
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.3  Before you Submit,[],[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.4  Project Rubric,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Spring Boot annotations and their functions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Spring Boot annotations like <code class=""chakra-code css-1u83yg1"">@Controller</code>, <code class=""chakra-code css-1u83yg1"">@RestController</code>, <code class=""chakra-code css-1u83yg1"">@RequestBody</code>, <code class=""chakra-code css-1u83yg1"">@RequestParams</code>, etc. in the Java classes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Thymeleaf standard dialects in the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Thymeleaf attributes in the HTMl files like <strong>th:action</strong>, etc.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integrate MyBatis into the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are annotations like <code class=""chakra-code css-1u83yg1"">@Mapper</code>, <code class=""chakra-code css-1u83yg1"">@Select</code>, <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> in the Java classes and/or imports from MyBatis/iBatis API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write an application that will fail gracefully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If invalid or improper inputs are given to the system, it should not crash or display raw error information. Error messages should be shown or users should be disallowed from sending invalid or improper input. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testBadUrl()</code> and <code class=""chakra-code css-1u83yg1"">testLargeUpload()</code> test cases provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a signup page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The signup page already has input fields for all the data you need from the user, including username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user signup workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful signup, the user should be taken to the login page with a message indicating their registration was successful. Otherwise, an error message should be shown on the sign-up page. An error message is already present in the template, but should only be visible if an error occurred during signup. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testRedirection()</code> test case provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a login page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The login page already has the username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user login/logout workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful login, the user should be taken to their home page.</p>\n<p class=""chakra-text css-o3oz8b"">An error message is already present in the template, but should only be visible if an error occurred during signup.</p>\n<p class=""chakra-text css-o3oz8b"">On logout, the user should no longer have access to the home page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a home page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The home page should have three tabs:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">The user should be able to upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">The user should be able to add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">The user should be able to add new credentials, view existing credentials unencrypted and remove them as well</li></ol>\n<p class=""chakra-text css-o3oz8b"">The home template already has the forms required by this functionality. Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission</p>\n<p class=""chakra-text css-o3oz8b"">Details on individual features are documented in Section 3.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement persistent storage for users\' important data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, they should see the data they have added to the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement note storage, edit, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful note creation, the user should be shown a success message and the created note should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful note deletion, the user should be shown a success message and the deleted note should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects edit, they should be shown a view with the note\'s current title and text. On successful note update, the user should be shown a success message and the updated note should appear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement file storage, download, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Upload: On successful file upload, the user should be shown a success message and the uploaded file should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful file deletion, the user should be shown a success message and the deleted file should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Download: On successful file download, the file should download to the user\'s system.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement secure credential storage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful credential creation, the user should be shown a success message and the created credential should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects update, they should be shown a view with the unencrypted credentials. When they select save, the list should be updated with the edited credential details.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful credential deletion, the user should be shown a success message and the deleted credential should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Perform data validation and sanitization</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should not allow duplicate usernames or duplicate filenames attributed to a single user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Secure the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can’t access the home page or the three tabs on that page without logging in first. The login and signup page should be visible to all the users without any authentication.</p>\n<p class=""chakra-text css-o3oz8b"">If someone isn\'t logged in, they must be redirected to the login page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can access only their own data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A logged-in user should only be able to view their own data, and not anyone else\'s data. The data should only be viewable to the specific user who owns it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The credentials are kept encrypted in the database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</p>\n<p class=""chakra-text css-o3oz8b"">The user should only see the decrypted version when they want to edit it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement an ORM model that maps to the database using MyBatis</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the tables in the database (specified in <code class=""chakra-code css-1u83yg1"">src/main/resources/schema.sql</code>) and create <code class=""chakra-code css-1u83yg1"">@Mapper</code> annotated interfaces to serve as Spring components in your application.</p>\n<p class=""chakra-text css-o3oz8b"">You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test signup and login flow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that verifies that the home page is not accessible without logging in.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing, and deleting notes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing and deleting credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">If a user knows the file, note, or credential ID of another user, make sure they can’t make a direct request through the browser to view, edit, or delete that file, note, or credential.</li><li class=""css-cvpopp"">Use test-driven-development.\nWrite your selenium tests before implementing the functionality they’re testing, and watch you tests go from red to green as you finish features!\nUse page objects to abstract selenium element selection and actions.\nTest file upload and download with selenium. This will require some extra research!\nTest everything! Verify all the requirements above with selenium tests, down to expected successes and failures in specific</li><li class=""css-cvpopp"">Make it your own! You can replace the bootstrap CSS and JS  libraries with a design framework of your choosing, and redesign the HTML templates to customize and redesign the website. Note: this could take a long time!</li></ol></div>']",[],
Java Web Developer,COURSE 2:Spring Boot Basics,SuperDuperDrive,7.5  Submit Project,"['<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Thymeleaf standard dialects in the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Thymeleaf attributes in the HTMl files like <strong>th:action</strong>, etc.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Utilize Spring Boot annotations and their functions</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are Spring Boot annotations like <code class=""chakra-code css-1u83yg1"">@Controller</code>, <code class=""chakra-code css-1u83yg1"">@RestController</code>, <code class=""chakra-code css-1u83yg1"">@RequestBody</code>, <code class=""chakra-code css-1u83yg1"">@RequestParams</code>, etc. in the Java classes.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write an application that will fail gracefully</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">If invalid or improper inputs are given to the system, it should not crash or display raw error information. Error messages should be shown or users should be disallowed from sending invalid or improper input. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testBadUrl()</code> and <code class=""chakra-code css-1u83yg1"">testLargeUpload()</code> test cases provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Integrate MyBatis into the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">There are annotations like <code class=""chakra-code css-1u83yg1"">@Mapper</code>, <code class=""chakra-code css-1u83yg1"">@Select</code>, <code class=""chakra-code css-1u83yg1"">@Insert</code>, <code class=""chakra-code css-1u83yg1"">@Update</code>, and <code class=""chakra-code css-1u83yg1"">@Delete</code> in the Java classes and/or imports from MyBatis/iBatis API.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a login page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ Added the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The login page already has the username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user signup workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful signup, the user should be taken to the login page with a message indicating their registration was successful. Otherwise, an error message should be shown on the sign-up page. An error message is already present in the template, but should only be visible if an error occurred during signup. Make sure your implementation passes the <code class=""chakra-code css-1u83yg1"">testRedirection()</code> test case provided by Udacity.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Develop a signup page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ Added the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The signup page already has input fields for all the data you need from the user, including username and password fields.</p>\n<p class=""chakra-text css-o3oz8b"">Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a user login/logout workflow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">On a successful login, the user should be taken to their home page.</p>\n<p class=""chakra-text css-o3oz8b"">An error message is already present in the template, but should only be visible if an error occurred during signup.</p>\n<p class=""chakra-text css-o3oz8b"">On logout, the user should no longer have access to the home page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create a home page</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The user is able to:</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">✅ Add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">✅ Add new credentials, view existing credentials unencrypted and remove them as well.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The home page should have three tabs:</p>\n<ol role=""list"" class=""css-13a5a39""><li class=""css-cvpopp"">The user should be able to upload new files on this tab and download/remove existing files</li><li class=""css-cvpopp"">The user should be able to add new notes and edit/remove existing ones</li><li class=""css-cvpopp"">The user should be able to add new credentials, view existing credentials unencrypted and remove them as well</li></ol>\n<p class=""chakra-text css-o3oz8b"">The home template already has the forms required by this functionality. Add the proper Thymeleaf attributes to bind the form data to the model and send it to the back-end on submission</p>\n<p class=""chakra-text css-o3oz8b"">Details on individual features are documented in Section 3.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement secure credential storage</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the credential functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Creation ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Deletion ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Edit/Update ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful credential creation, the user should be shown a success message and the created credential should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects update, they should be shown a view with the unencrypted credentials. When they select save, the list should be updated with the edited credential details.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful credential deletion, the user should be shown a success message and the deleted credential should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement persistent storage for users\' important data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">When a user logs in, they should see the data they have added to the application.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement note storage, edit, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the note functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Creation ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Deletion ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Edit/Update ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Creation: On successful note creation, the user should be shown a success message and the created note should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful note deletion, the user should be shown a success message and the deleted note should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Edit/Update: When a user selects edit, they should be shown a view with the note\'s current title and text. On successful note update, the user should be shown a success message and the updated note should appear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement file storage, download, and removal</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the file functionalities are working as expected:-</p>\n<ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">UPLOAD ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">Delete ✅</h4>\n</li><li class=""css-cvpopp"">\n<h4 class=""chakra-heading css-1dlhxqh"">download ✅</h4>\n</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Upload: On successful file upload, the user should be shown a success message and the uploaded file should appear in the list.</p>\n<p class=""chakra-text css-o3oz8b"">Deletion: On successful file deletion, the user should be shown a success message and the deleted file should disappear from the list.</p>\n<p class=""chakra-text css-o3oz8b"">Download: On successful file download, the file should download to the user\'s system.</p>\n<p class=""chakra-text css-o3oz8b"">Errors: Users should be notified of errors if they occur.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The credentials are kept encrypted in the database</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</li><li class=""css-cvpopp"">✅ The user should only see the decrypted version when they want to edit it.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">All the passwords should be stored as encrypted in the database and shown as encrypted when the user retrieves them.</p>\n<p class=""chakra-text css-o3oz8b"">The user should only see the decrypted version when they want to edit it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Implement an ORM model that maps to the database using MyBatis</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Create Java classes to model the tables in the database (specified in <code class=""chakra-code css-1u83yg1"">src/main/resources/schema.sql</code>) and create <code class=""chakra-code css-1u83yg1"">@Mapper</code> annotated interfaces to serve as Spring components in your application.</p>\n<p class=""chakra-text css-o3oz8b"">You should have one model class and one mapper class per database table.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Secure the application</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can’t access the home page or the three tabs on that page without logging in first. The login and signup page should be visible to all the users without any authentication.</p>\n<p class=""chakra-text css-o3oz8b"">If someone isn\'t logged in, they must be redirected to the login page.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A user can access only their own data</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">✅ A logged-in user should only be able to view their own data, and not anyone else\'s data.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">A logged-in user should only be able to view their own data, and not anyone else\'s data. The data should only be viewable to the specific user who owns it.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Perform data validation and sanitization</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">The application should not allow duplicate usernames or duplicate filenames attributed to a single user.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test signup and login flow</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that verifies that the home page is not accessible without logging in.</li><li class=""css-cvpopp"">✅ Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that verifies that the home page is not accessible without logging in.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that signs up a new user, logs that user in, verifies that they can access the home page, then logs out and verifies that the home page is no longer accessible.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing, and deleting notes</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a note and verifies that the note details are visible in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the edit note button on an existing note, changes the note data, saves the changes, and verifies that the changes appear in the note list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing notes, clicks the delete note button on an existing note, and verifies that the note no longer appears in the note list.</p></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Test adding, editing and deleting credentials</p></div>', '<div class=""ureact-markdown css-tc5hjw""><ul role=""list"" class=""css-19qh3zo""><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</li><li class=""css-cvpopp"">✅ Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</li></ul></div>', '<div class=""ureact-markdown css-tc5hjw""><p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user, creates a credential and verifies that the credential details are visible in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the edit credential button on an existing credential, changes the credential data, saves the changes, and verifies that the changes appear in the credential list.</p>\n<p class=""chakra-text css-o3oz8b"">Write a Selenium test that logs in an existing user with existing credentials, clicks the delete credential button on an existing credential, and verifies that the credential no longer appears in the credential list.</p></div>']",['https://udacity-reviews-uploads.s3.us-west-2.amazonaws.com/_attachments/356954/1717915067/Screenshot_2024-06-09_at_12.06.39_PM.png'],